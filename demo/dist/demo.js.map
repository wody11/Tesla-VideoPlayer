{"version":3,"file":"demo.js","sources":["../../src/core/player-core.ts","../entry/main-entry.ts"],"sourcesContent":["/**\r\n * PlayerCore - 主线程播放器内核门面（骨架）\r\n * 负责 lifecycle、解码器管理、与 worker 通信、渲染队列。\r\n */\r\n\r\nexport interface PlayerCoreOptions {\r\n  canvas: HTMLCanvasElement;\r\n  videoLookAheadMs?: number; // 预解码窗口（默认 100ms）\r\n  dropWindowMs?: number;     // 落后丢帧窗口（默认 200ms）\r\n  leadWindowMs?: number;     // 超前立即绘制阈值（默认 200ms）\r\n  maxVideoInFlight?: number; // 同时在解码器中的最大帧数（默认 8）\r\n  maxVideoQueue?: number;    // 主线程待解码队列最大长度（默认 300）\r\n  renderer?: '2d' | 'webgl'; // 渲染器选择，默认 2D\r\n  usePcrBeforeAudio?: boolean; // 在音频时间基建立前，是否临时用 PCR 作为视频调度时钟\r\n  enableSoftwareFallback?: boolean; // WebCodecs 不可用或配置失败时，尝试软解回退（占位）\r\n  stallAudioMinAheadS?: number; // 默认 0.03s\r\n  stallNoAudioIdleMs?: number;  // 默认 500ms\r\n}\r\n\r\nexport class PlayerCore {\r\n  // 播放控制状态\r\n  private isPlaying: boolean = false;\r\n  private playbackRate: number = 1.0; // 当前生效速率（平滑趋近目标）\r\n  private targetPlaybackRate: number = 1.0; // 目标速率\r\n  private playbackRateTimer?: number; // 平滑调节定时器\r\n  private eventListeners: { [key: string]: Function[] } = {};\r\n  private _applyPlaybackRateToSources() {\r\n    try {\r\n      for (const s of this.audioSources) {\r\n        try { ((s as any).playbackRate && (s as any).playbackRate.value !== undefined) && (((s as any).playbackRate.value = this.playbackRate)); } catch {}\r\n      }\r\n    } catch {}\r\n  }\r\n\r\n  // 事件注册\r\n  on(event: 'buffering'|'playing'|'ended'|'error', cb: Function) {\r\n    if (!this.eventListeners[event]) this.eventListeners[event] = [];\r\n    this.eventListeners[event].push(cb);\r\n  }\r\n  off(event: 'buffering'|'playing'|'ended'|'error', cb: Function) {\r\n    const arr = this.eventListeners[event];\r\n    if (!arr) return;\r\n    const i = arr.indexOf(cb);\r\n    if (i >= 0) arr.splice(i, 1);\r\n  }\r\n  once(event: 'buffering'|'playing'|'ended'|'error', cb: Function) {\r\n    const wrap = (...args: any[]) => { try { cb(...args); } finally { this.off(event, wrap); } };\r\n    this.on(event, wrap);\r\n  }\r\n\r\n  // 事件分发\r\n  private emit(event: string, ...args: any[]) {\r\n    (this.eventListeners[event]||[]).forEach(fn => { try { fn(...args); } catch(e){} });\r\n  }\r\n  // 检查 WebCodecs 支持\r\n  private isWebCodecsSupported(): boolean {\r\n    return typeof (window as any).VideoDecoder !== 'undefined' && typeof (window as any).AudioDecoder !== 'undefined';\r\n  }\r\n\r\n  // 软解接口占位（WASM）\r\n  private decodeVideoWASM(chunk: any) {\r\n    // TODO: 调用 WASM 解码库（如 ffmpeg.wasm），返回解码后帧\r\n    console.warn('WASM软解未实现，当前仅为接口占位');\r\n  }\r\n\r\n  private decodeAudioWASM(chunk: any) {\r\n    // TODO: 调用 WASM 解码库，返回解码后 PCM\r\n    console.warn('WASM软解未实现，当前仅为接口占位');\r\n  }\r\n  private generationId: number = 0;\r\n  // Timebase helpers: we use microseconds (us) internally for sample timestamps\r\n  private US_TO_S = (us: number) => us / 1e6;\r\n  private MS_TO_US = (ms: number) => ms * 1000;\r\n  private __lookAheadUs: number = 80_000; // 80ms，适当增加前瞻，缓解音频抖动\r\n  private __dropWindowUs: number = 120_000; // 120ms，降低卡顿\r\n  // 视频绘制“超前阈值”，当视频帧相对音频主钟超前超过此值时，选择不再等待直接绘制一次（以保证画面活性）\r\n  // 注意：这是“可见性优先”的策略，若严格追求唇同步，可将其调小直至 0\r\n  private __leadWindowUs: number = 200_000; // 200ms\r\n  private __maxVideoInFlight = 6; // 初始 in-flight 限制更紧\r\n  private __maxVideoQueue = 180;  // 初始排队更短，减小首段积压\r\n  // 启动期引导：首个关键帧后，在一定窗口内（us）额外喂入少量 delta 帧，尽快稳态\r\n  private __bootstrapLimitUs: number = 500_000; // 500ms\r\n  private __bootstrapMax: number = 20; // 最多 20 帧\r\n  private stallMinAudioAheadS: number = 0.03;\r\n  private stallNoAudioIdleMs: number = 500;\r\n  private normalizeTsToUs(ts: number) {\r\n    // 启发式：> ~50 分钟（3e9）视为 90kHz tick，转换为微秒；否则按微秒处理\r\n    try {\r\n  if (!Number.isFinite(ts)) return ts;\r\n  return (ts > 3e9) ? Math.round(ts * (1e6 / 90000)) : Math.round(ts);\r\n    } catch { return ts; }\r\n  }\r\n\r\n  // 工具：检测 AnnexB 起始码\r\n  private _isAnnexB(buf: ArrayBuffer): boolean {\r\n    try {\r\n      const u = new Uint8Array(buf);\r\n      if (u.length < 4) return false;\r\n      // 支持 00 00 01 或 00 00 00 01\r\n      return (u[0] === 0 && u[1] === 0 && ((u[2] === 1) || (u[2] === 0 && u[3] === 1)));\r\n    } catch { return false; }\r\n  }\r\n\r\n  // 工具：将 AVCC（自适应 1/2/4 字节长度前缀）转换为 AnnexB（起始码）\r\n  private _avccToAnnexB(buf: ArrayBuffer): ArrayBuffer {\r\n    try {\r\n      const u8 = new Uint8Array(buf);\r\n      if (u8.length < 1) return buf;\r\n      const tryParse = (lenSize: 1 | 2 | 4): ArrayBuffer | null => {\r\n        const chunks: Uint8Array[] = [];\r\n        let off = 0;\r\n        while (off + lenSize <= u8.length) {\r\n          let len = 0;\r\n          if (lenSize === 4) {\r\n            len = (u8[off] << 24) | (u8[off + 1] << 16) | (u8[off + 2] << 8) | (u8[off + 3]);\r\n          } else if (lenSize === 2) {\r\n            len = (u8[off] << 8) | (u8[off + 1]);\r\n          } else { // 1\r\n            len = u8[off];\r\n          }\r\n          off += lenSize;\r\n          if (len <= 0 || off + len > u8.length) return null;\r\n          chunks.push(new Uint8Array([0, 0, 0, 1]));\r\n          chunks.push(u8.subarray(off, off + len));\r\n          off += len;\r\n        }\r\n        if (off !== u8.length || chunks.length === 0) return null;\r\n        let total = 0; for (const c of chunks) total += c.length;\r\n        const out = new Uint8Array(total);\r\n        let p = 0; for (const c of chunks) { out.set(c, p); p += c.length; }\r\n        return out.buffer;\r\n      };\r\n      return tryParse(4) || tryParse(2) || tryParse(1) || buf;\r\n    } catch { return buf; }\r\n  }\r\n\r\n  // 缓存最近的 SPS/PPS（AnnexB NAL 单元，包含起始码）\r\n  private _lastSpsUnits: Uint8Array[] = [];\r\n  private _lastPpsUnits: Uint8Array[] = [];\r\n\r\n  // 扫描 AnnexB，缓存 SPS/PPS，返回是否检测到\r\n  private _scanAndCacheSpsPpsFromAnnexB(buf: ArrayBuffer): { hasSps: boolean; hasPps: boolean } {\r\n    try {\r\n      const u8 = new Uint8Array(buf);\r\n      const starts: number[] = [];\r\n      // 找到所有起始码位置\r\n      for (let i = 0; i + 3 < u8.length; i++) {\r\n        if (u8[i] === 0 && u8[i + 1] === 0 && ((u8[i + 2] === 1) || (u8[i + 2] === 0 && u8[i + 3] === 1))) {\r\n          starts.push(i);\r\n          if (u8[i + 2] === 1) i += 2; else i += 3; // 跳过起始码长度\r\n        }\r\n      }\r\n      if (starts.length === 0) return { hasSps: false, hasPps: false };\r\n      // 计算每个 NAL 的边界\r\n      const bounds: Array<{ off: number; len: number; type: number }> = [];\r\n      for (let si = 0; si < starts.length; si++) {\r\n        const off = starts[si];\r\n        const scLen = (u8[off + 2] === 1) ? 3 : 4;\r\n        const payloadStart = off + scLen;\r\n        const next = (si + 1 < starts.length) ? starts[si + 1] : u8.length;\r\n        const len = next - off;\r\n        if (payloadStart < u8.length) {\r\n          const nalHeader = u8[payloadStart];\r\n          const nalType = nalHeader & 0x1f; // H.264\r\n          bounds.push({ off, len, type: nalType });\r\n        }\r\n      }\r\n      let hasSps = false, hasPps = false;\r\n      for (const b of bounds) {\r\n        if (b.type === 7) { hasSps = true; this._lastSpsUnits = [u8.subarray(b.off, b.off + b.len)]; }\r\n        if (b.type === 8) { hasPps = true; this._lastPpsUnits = [u8.subarray(b.off, b.off + b.len)]; }\r\n      }\r\n      return { hasSps, hasPps };\r\n    } catch { return { hasSps: false, hasPps: false }; }\r\n  }\r\n\r\n  // 若关键帧缺少 SPS/PPS，则用缓存注入（AnnexB 格式）\r\n  private _ensureSpsPpsForKeyAnnexB(buf: ArrayBuffer): ArrayBuffer {\r\n    try {\r\n      const found = this._scanAndCacheSpsPpsFromAnnexB(buf);\r\n      if (found.hasSps && found.hasPps) return buf;\r\n      const needSps = !found.hasSps && this._lastSpsUnits.length > 0;\r\n      const needPps = !found.hasPps && this._lastPpsUnits.length > 0;\r\n      if (!needSps && !needPps) return buf;\r\n      const u8 = new Uint8Array(buf);\r\n      let extraLen = 0;\r\n      if (needSps) for (const s of this._lastSpsUnits) extraLen += s.length;\r\n      if (needPps) for (const p of this._lastPpsUnits) extraLen += p.length;\r\n      const out = new Uint8Array(extraLen + u8.length);\r\n      let p = 0;\r\n      if (needSps) { for (const s of this._lastSpsUnits) { out.set(s, p); p += s.length; } }\r\n      if (needPps) { for (const q of this._lastPpsUnits) { out.set(q, p); p += q.length; } }\r\n      out.set(u8, p);\r\n      return out.buffer;\r\n    } catch { return buf; }\r\n  }\r\n\r\n  // 从 avcC extradata 提取 SPS/PPS 并缓存（便于后续 AnnexB 注入）\r\n  private _cacheSpsPpsFromAvcC(desc: ArrayBuffer) {\r\n    try {\r\n      const u = new Uint8Array(desc);\r\n      if (u.length < 7) return;\r\n      let off = 0;\r\n      // 跳过头部 5 字节：version, profile, compat, level, lengthSizeMinusOne\r\n      off = 5;\r\n      const numSps = u[off++] & 0x1f;\r\n      const spsUnits: Uint8Array[] = [];\r\n      for (let i = 0; i < numSps; i++) {\r\n        if (off + 2 > u.length) return;\r\n        const len = (u[off] << 8) | u[off + 1]; off += 2;\r\n        if (off + len > u.length) return;\r\n        // 组装 AnnexB：起始码 + NAL\r\n        const out = new Uint8Array(4 + len);\r\n        out.set([0,0,0,1], 0);\r\n        out.set(u.subarray(off, off + len), 4);\r\n        spsUnits.push(out);\r\n        off += len;\r\n      }\r\n      if (off >= u.length) { this._lastSpsUnits = spsUnits; return; }\r\n      const numPps = u[off++];\r\n      const ppsUnits: Uint8Array[] = [];\r\n      for (let i = 0; i < numPps; i++) {\r\n        if (off + 2 > u.length) break;\r\n        const len = (u[off] << 8) | u[off + 1]; off += 2;\r\n        if (off + len > u.length) break;\r\n        const out = new Uint8Array(4 + len);\r\n        out.set([0,0,0,1], 0);\r\n        out.set(u.subarray(off, off + len), 4);\r\n        ppsUnits.push(out);\r\n        off += len;\r\n      }\r\n      if (spsUnits.length) this._lastSpsUnits = spsUnits;\r\n      if (ppsUnits.length) this._lastPpsUnits = ppsUnits;\r\n    } catch { /* ignore */ }\r\n  }\r\n\r\n  // Audio scheduling state\r\n  private audioBasePtsUs?: number; // first audio sample PTS in us\r\n  private audioBaseTime?: number; // corresponding AudioContext.currentTime (s)\r\n  // 统一媒体时间轴纪元（谁先来以谁为 0 点）\r\n  private mediaEpochUs?: number;\r\n  // 记录当前音频配置用于热重配\r\n  private audioConfiguredSampleRate?: number;\r\n  private audioConfiguredChannels?: number;\r\n  private audioLastCodec?: string;\r\n  private audioLastDescription?: ArrayBuffer | null;\r\n  // 可选：在音频时间基未建立前，用 PCR 作为临时时钟\r\n  private pcrBasePtsUs?: number;\r\n  private pcrBaseTime?: number; // performance.now() 秒\r\n  private usePcrBeforeAudio: boolean = false;\r\n  // 进一步回退：若既无音频也无 PCR，则基于首个视频样本建立墙钟映射\r\n  private videoBasePtsUs?: number;\r\n  private videoBaseTime?: number; // performance.now() 秒\r\n  // 视频格式/配置观测与热重配标志\r\n  private videoCodec?: string;\r\n  private videoDescAttached: boolean = false;\r\n  private firstVideoSeen: boolean = false;\r\n  private annexbDetected: boolean = false;\r\n  private lastVideoPtsUs?: number; // 最近绘制的视频帧PTS，用于去重/倒退丢弃\r\n  // 连续时间轴（跨 discontinuity/seek 维持 UI 连续）；单位：微秒\r\n  private continuousTimeline: boolean = true;\r\n  private timelineOffsetUs: number = 0;\r\n  // 已计划播放的音频节点，便于在 seek/stop/discontinuity 时统一停止\r\n  private audioSources: Set<AudioBufferSourceNode> = new Set();\r\n\r\n  private _registerAudioSource(src: AudioBufferSourceNode) {\r\n    try {\r\n      this.audioSources.add(src);\r\n      const cleanup = () => { try { src.disconnect(); } catch {} this.audioSources.delete(src); };\r\n      // ended 事件在部分实现中可用；若不可用也不致命\r\n      (src as any).addEventListener?.('ended', cleanup);\r\n      // 兜底：在 stop/seek/discontinuity 中统一清理\r\n    } catch {}\r\n  }\r\n\r\n  private _stopAllAudioSources() {\r\n    try {\r\n      for (const s of Array.from(this.audioSources)) {\r\n        try { s.stop(); } catch {}\r\n        try { s.disconnect(); } catch {}\r\n        this.audioSources.delete(s);\r\n      }\r\n    } catch {}\r\n  }\r\n  // 计算当前音频主钟对应的 PTS（us）。若基准未建立，返回 undefined\r\n  private _getAudioNowUs(): number | undefined {\r\n    if (!this.audioCtx || this.audioBasePtsUs === undefined || this.audioBaseTime === undefined) return undefined;\r\n    const nowS = this.audioCtx.currentTime;\r\n    const deltaS = nowS - this.audioBaseTime;\r\n  return this.audioBasePtsUs + Math.max(0, deltaS) * 1e6;\r\n  }\r\n\r\n  // 轻量：尝试解锁 AudioContext（在需要时调用，不阻塞主流程）\r\n  private _ensureAudioUnlocked(): void {\r\n    try {\r\n      if (!this.audioCtx) return;\r\n      const st = String((this.audioCtx.state as any) || '');\r\n      if (st === 'suspended' || st === 'interrupted') {\r\n        this.audioCtx.resume().catch(()=>{});\r\n      }\r\n    } catch {}\r\n  }\r\n\r\n  // 平滑调节当前播放速率，逐步靠近 targetPlaybackRate\r\n  private _ensurePlaybackRateTimer(): void {\r\n    try {\r\n      if (this.playbackRateTimer) return;\r\n      this.playbackRateTimer = window.setInterval(() => {\r\n        const step = 0.01;\r\n        if (Math.abs(this.playbackRate - this.targetPlaybackRate) <= step) {\r\n          this.playbackRate = this.targetPlaybackRate;\r\n          if (this.playbackRateTimer) { window.clearInterval(this.playbackRateTimer); this.playbackRateTimer = undefined; }\r\n          this._applyPlaybackRateToSources();\r\n          return;\r\n        }\r\n        if (this.playbackRate < this.targetPlaybackRate) this.playbackRate = Math.min(this.targetPlaybackRate, this.playbackRate + step);\r\n        else this.playbackRate = Math.max(this.targetPlaybackRate, this.playbackRate - step);\r\n        this._applyPlaybackRateToSources();\r\n      }, 50);\r\n    } catch {}\r\n  }\r\n\r\n  // 统一获取当前播放时钟（优先音频，其次可选 PCR）\r\n  private _getClockNowUs(): number | undefined {\r\n    const a = this._getAudioNowUs();\r\n    if (a !== undefined) return a;\r\n  if (this.usePcrBeforeAudio && this.pcrBasePtsUs !== undefined && this.pcrBaseTime !== undefined) {\r\n    const nowS = performance.now() / 1000;\r\n  const deltaS = nowS - this.pcrBaseTime;\r\n  return this.pcrBasePtsUs + Math.max(0, deltaS) * 1e6;\r\n    }\r\n    if (this.videoBasePtsUs !== undefined && this.videoBaseTime !== undefined) {\r\n    const nowS = performance.now() / 1000;\r\n  const deltaS = nowS - this.videoBaseTime;\r\n  return this.videoBasePtsUs + Math.max(0, deltaS) * 1e6;\r\n    }\r\n    return undefined;\r\n  }\r\n\r\n  // 基于音频主钟驱动视频解码（按 DTS/PTS 队列），输出重排交给 VideoDecoder\r\n  private _renderVideoFrame() {\r\n  if (!this.videoDecoder) { try { if ((window as any).__DEMO_DEBUG) console.debug('[v] no decoder'); } catch {} return; }\r\n  if (this.videoDecodeQueue.length === 0) { try { if ((window as any).__DEMO_DEBUG) console.debug('[v] queue empty'); } catch {} return; }\r\n  try { if ((window as any).__DEMO_DEBUG) console.debug('[v] queue size=', this.videoDecodeQueue.length, 'readyForDeltas=', this.videoReadyForDeltas); } catch {}\r\n  const audioNowUs = this._getClockNowUs();\r\n  if (audioNowUs === undefined) {\r\n      // 尚未建立任何时钟：尝试优先送入首个关键帧，尽快出画\r\n      const idx = this.videoDecodeQueue.findIndex(x => x.key);\r\n      if (idx >= 0) {\r\n        const firstK = this.videoDecodeQueue.splice(idx, 1)[0];\r\n        try {\r\n                    const tsSafe = Math.max(0, Number(firstK.ts) || 0);\r\n          // 确保送入的是 AnnexB：若为 AVCC 则转换\r\n          let payload = firstK.data;\r\n          if (!this._isAnnexB(payload)) payload = this._avccToAnnexB(payload);\r\n          // 若为关键帧，缺失参数集则从缓存注入 SPS/PPS\r\n          try { payload = this._ensureSpsPpsForKeyAnnexB(payload); } catch {}\r\n          const init: any = { type: 'key', timestamp: tsSafe, data: payload };\r\n          if (typeof firstK.dur === 'number' && firstK.dur > 0) init.duration = Number(firstK.dur) || undefined;\r\n          const chunk = new (window as any).EncodedVideoChunk(init);\r\n      if ((window as any).__DEMO_DEBUG) { try { console.debug('[feed] early key -> ts(us)=', tsSafe); } catch {} }\r\n  this.videoDecoder.decode(chunk);\r\n  try { this._markActivity(); } catch {}\r\n      // 一旦送入关键帧，允许后续 delta 帧进入，避免解码器饿死\r\n      this.videoReadyForDeltas = true;\r\n\r\n          // 额外引导：在关键帧之后解码少量相邻 delta（<=200ms 或最多 8 帧），帮助尽快进入稳态\r\n          const limitUs = tsSafe + this.__bootstrapLimitUs;\r\n          let fed = 0;\r\n          for (let i = 0; i < this.videoDecodeQueue.length && fed < this.__bootstrapMax; ) {\r\n            const n = this.videoDecodeQueue[i];\r\n            if ((n.dts ?? n.ts) <= limitUs && !n.key) {\r\n              this.videoDecodeQueue.splice(i, 1);\r\n              try {\r\n                const nts = Math.max(0, Number(n.ts) || 0);\r\n                // 同样保证 AnnexB\r\n                let npayload = n.data;\r\n                if (!this._isAnnexB(npayload)) npayload = this._avccToAnnexB(npayload);\r\n                const ninit: any = { type: 'delta', timestamp: nts, data: npayload };\r\n                if (typeof n.dur === 'number' && n.dur > 0) ninit.duration = Number(n.dur) || undefined;\r\n                const nchunk = new (window as any).EncodedVideoChunk(ninit);\r\n                if ((window as any).__DEMO_DEBUG) { try { console.debug('[feed] bootstrap delta ts(us)=', nts); } catch {} }\r\n                this.videoDecoder.decode(nchunk);\r\n                try { this._markActivity(); } catch {}\r\n                fed++;\r\n              } catch {}\r\n            } else { i++; }\r\n          }\r\n        } catch {}\r\n      }\r\n      return;\r\n    }\r\n\r\n    // 1) 丢弃严重落后的帧（按 PTS 比较）\r\n    const dropBeforeUs = audioNowUs - this.__dropWindowUs;\r\n    if (this.videoDecodeQueue.length > 0) {\r\n      let dropped = 0;\r\n      while (this.videoDecodeQueue.length > 0) {\r\n        const head = this.videoDecodeQueue[0];\r\n        const headPtsUs = head.ts;\r\n        if (headPtsUs < dropBeforeUs && this.videoDecodeQueue.length > 2) {\r\n          this.videoDecodeQueue.shift();\r\n          dropped++; this.stats.framesDropped++;\r\n        } else {\r\n          break;\r\n        }\r\n      }\r\n      if (dropped > 0) {\r\n        // 可选：上报丢帧统计\r\n      }\r\n    }\r\n\r\n    // 2) 预解码：按 DTS 顺序尽量把解码队列喂满（避免 B 帧引用阻塞），用 in-flight 数限制控制前瞻深度\r\n    // 控制解码排队深度，避免无穷积压。多数实现提供 decodeQueueSize。\r\n  const vdec: any = this.videoDecoder as any;\r\n  const maxInFlight = this.__maxVideoInFlight;\r\n  while (this.videoDecodeQueue.length > 0 && ((vdec.decodeQueueSize ?? 0) < maxInFlight)) {\r\n      const next = this.videoDecodeQueue.shift()!;\r\n      try {\r\n    // 在首帧成功输出前，跳过 delta 帧，避免解码器依赖未满足\r\n    if (!this.videoReadyForDeltas && !next.key) {\r\n      continue;\r\n    }\r\n    // 控制预解码窗口：仅在音频时基可用时，限制喂入距离音频时钟的前瞻深度\r\n    if (audioNowUs !== undefined && next.ts > audioNowUs + this.__lookAheadUs) {\r\n      // 放回队头，等待时钟前进\r\n      this.videoDecodeQueue.unshift(next);\r\n      break;\r\n    }\r\n  const tsSafe = Math.max(0, Number(next.ts) || 0);\r\n  // 确保 AnnexB：如检测为 AVCC 则转换\r\n  let payload = next.data;\r\n  if (!this._isAnnexB(payload)) payload = this._avccToAnnexB(payload);\r\n  if (next.key) { try { payload = this._ensureSpsPpsForKeyAnnexB(payload); } catch {} }\r\n  const init: any = { type: next.key ? 'key' : 'delta', timestamp: tsSafe, data: payload };\r\n  if (typeof next.dur === 'number' && next.dur > 0) init.duration = Number(next.dur) || undefined;\r\n    const chunk = new (window as any).EncodedVideoChunk(init);\r\n    if ((window as any).__DEMO_DEBUG) { try { console.debug('[feed]', init.type, 'ts(us)=', tsSafe); } catch {} }\r\n  this.videoDecoder.decode(chunk);\r\n  try { this._markActivity(); } catch {}\r\n    if (next.key) this.videoReadyForDeltas = true;\r\n      } catch (e) { /* 解码错误时忽略该帧 */ }\r\n    }\r\n  }\r\n  private canvas: HTMLCanvasElement;\r\n  private renderer2D?: any;\r\n  private worker?: Worker;\r\n  private videoDecoder?: any;\r\n  private videoReadyForDeltas: boolean = false;\r\n  private enableSoftwareFallback: boolean = false;\r\n  private softwareVideoActive: boolean = false;\r\n  private softwareAudioActive: boolean = false;\r\n  // 解码队列：按解码顺序（DTS 优先，缺失时回退 PTS）排列，仅存待送入解码器的样本\r\n  private videoDecodeQueue: Array<{ ts: number; dts?: number; key: boolean; data: ArrayBuffer; dur?: number }> = [];\r\n  private renderTimer?: number;\r\n  private audioDecoder?: any;\r\n  private audioConfigured: boolean = false;\r\n  private audioCtx?: AudioContext;\r\n  private audioQueue: any[] = [];\r\n  private lastSource?: { kind: 'hls'|'flv'|'mp4-url'|'mp4-init'; url?: string; buffer?: ArrayBuffer };\r\n  private lastWasPlaying: boolean = false;\r\n  private lastHlsSeq?: number;\r\n  // 简单运行指标\r\n  private stats = { framesDrawn: 0, framesDropped: 0 };\r\n  private statsTimer?: number;\r\n  private mediaDurationMs?: number; // VOD 总时长（来自 worker 或 MP4 信息）\r\n  private gainNode?: GainNode;\r\n  private muted: boolean = false;\r\n  private volume: number = 1;\r\n  // 缓冲/卡顿检测：跟踪音频已调度的最远结束时间（秒）与最近活动时间（毫秒）\r\n  private audioScheduledUntilS: number = 0;\r\n  private lastActivityTsMs: number = (typeof performance !== 'undefined' ? performance.now() : Date.now());\r\n  private stallTimer?: number;\r\n  private lastBufferingState: boolean = false;\r\n\r\n  constructor(opts: PlayerCoreOptions) {\r\n  this.canvas = opts.canvas;\r\n  // 默认启用 PCR 作为临时时钟（可被 opts 覆盖）\r\n  this.usePcrBeforeAudio = (typeof opts.usePcrBeforeAudio === 'boolean') ? opts.usePcrBeforeAudio : true;\r\n  this.enableSoftwareFallback = !!opts.enableSoftwareFallback;\r\n  if (typeof opts.videoLookAheadMs === 'number') this.__lookAheadUs = this.MS_TO_US(opts.videoLookAheadMs);\r\n  if (typeof opts.dropWindowMs === 'number') this.__dropWindowUs = this.MS_TO_US(opts.dropWindowMs);\r\n  if (typeof opts.leadWindowMs === 'number') this.__leadWindowUs = this.MS_TO_US(opts.leadWindowMs);\r\n  if (typeof opts.maxVideoInFlight === 'number') this.__maxVideoInFlight = Math.max(1, Math.floor(opts.maxVideoInFlight));\r\n  if (typeof opts.maxVideoQueue === 'number') this.__maxVideoQueue = Math.max(30, Math.floor(opts.maxVideoQueue));\r\n  if (typeof opts.stallAudioMinAheadS === 'number') this.stallMinAudioAheadS = Math.max(0, Number(opts.stallAudioMinAheadS));\r\n  if (typeof opts.stallNoAudioIdleMs === 'number') this.stallNoAudioIdleMs = Math.max(0, Math.floor(opts.stallNoAudioIdleMs));\r\n    try {\r\n      const want = opts.renderer || '2d';\r\n      if (want === 'webgl') {\r\n        try {\r\n          // eslint-disable-next-line @typescript-eslint/no-var-requires\r\n          const ModGL = require('./renderer-webgl');\r\n          this.renderer2D = new ModGL.RendererWebGL(this.canvas);\r\n        } catch { /* fallback to 2D */\r\n          // eslint-disable-next-line @typescript-eslint/no-var-requires\r\n          const Mod2D = require('./renderer-2d');\r\n          this.renderer2D = new Mod2D.Renderer2D(this.canvas);\r\n        }\r\n      } else {\r\n        // eslint-disable-next-line @typescript-eslint/no-var-requires\r\n        const Mod2D = require('./renderer-2d');\r\n        this.renderer2D = new Mod2D.Renderer2D(this.canvas);\r\n      }\r\n    } catch { /* ignore if module system differs */ }\r\n    // 周期性输出运行指标（仅在 __DEMO_DEBUG 时启用）\r\n  try {\r\n      if (!this.statsTimer) this.statsTimer = window.setInterval(() => {\r\n        if ((window as any).__DEMO_DEBUG) {\r\n          try { console.debug('[stats]', { ...this.stats, vq: this.videoDecodeQueue.length }); } catch {}\r\n        }\r\n      }, 1000);\r\n    } catch {}\r\n  // 启动卡顿/缓冲状态监测\r\n  this._ensureStallMonitor();\r\n  // 轻量用户手势解锁音频（一次性）\r\n  try {\r\n    const el = this.canvas as any;\r\n    if (el && !(el as any).__unlockHooked) {\r\n      const unlock = () => { try { this._ensureAudioUnlocked(); } catch {} };\r\n      el.addEventListener('pointerdown', unlock, { passive: true });\r\n      el.addEventListener('click', unlock, { passive: true });\r\n      (el as any).__unlockHooked = true;\r\n      (el as any).__unlockHandler = unlock;\r\n    }\r\n  } catch {}\r\n  // 页面可见性自适应：隐藏时降低渲染频率，显示时恢复\r\n  try {\r\n    const visHandler = () => {\r\n      try {\r\n        const hidden = (document as any).hidden;\r\n        if (hidden) {\r\n          if (this.renderTimer) { window.clearInterval(this.renderTimer); this.renderTimer = undefined; }\r\n          this.renderTimer = window.setInterval(() => this._renderVideoFrame(), 100);\r\n        } else {\r\n          if (this.renderTimer) { window.clearInterval(this.renderTimer); this.renderTimer = undefined; }\r\n          this.renderTimer = window.setInterval(() => this._renderVideoFrame(), 10);\r\n        }\r\n      } catch {}\r\n    };\r\n    if (!(window as any).__pc_vis_hooked) {\r\n      document.addEventListener('visibilitychange', visHandler);\r\n      (window as any).__pc_vis_hooked = true;\r\n      (window as any).__pc_vis_handler = visHandler;\r\n    }\r\n  } catch {}\r\n  }\r\n\r\n  async load(url: string) {\r\n  // 新会话前重置时基与队列，避免继承旧会话时间轴\r\n  this.videoDecodeQueue = [];\r\n  this.audioQueue = [] as any[];\r\n  this.audioBasePtsUs = undefined; this.audioBaseTime = undefined;\r\n  this.pcrBasePtsUs = undefined; this.pcrBaseTime = undefined;\r\n  this.videoBasePtsUs = undefined; this.videoBaseTime = undefined;\r\n  this.mediaEpochUs = undefined;\r\n  this.videoReadyForDeltas = false;\r\n  // 新会话开始重置连续时间轴\r\n  this.timelineOffsetUs = 0;\r\n  // 重置音频调度地平线\r\n  this.audioScheduledUntilS = 0;\r\n  this._stopAllAudioSources();\r\n  if (!this.worker) this._setupWorker();\r\n  this.generationId++;\r\n  const type = url.endsWith('.m3u8') ? 'openHLS' : (url.endsWith('.flv') ? 'openFLV' : 'open');\r\n  this.lastSource = { kind: type === 'openHLS' ? 'hls' : (type === 'openFLV' ? 'flv' : 'mp4-url'), url };\r\n  if (type === 'openHLS') {\r\n    const startSeq = (typeof this.lastHlsSeq === 'number') ? Math.max(0, this.lastHlsSeq) : undefined;\r\n    const startAtMs = (typeof this.startPositionMs === 'number') ? Math.max(0, this.startPositionMs) : undefined;\r\n    this.worker?.postMessage({ type, url, startSeq, startAtMs, generationId: this.generationId });\r\n  } else {\r\n    this.worker?.postMessage({ type, url, generationId: this.generationId });\r\n  }\r\n  }\r\n\r\n  async play() {\r\n    this.isPlaying = true;\r\n  this.lastWasPlaying = true;\r\n    this.emit('playing');\r\n    if (this.audioCtx) {\r\n      const st = String((this.audioCtx.state as any) || '');\r\n      if (st === 'suspended' || st === 'interrupted') {\r\n        await this.audioCtx.resume();\r\n      }\r\n    }\r\n  this._ensureAudioUnlocked();\r\n    if (!this.renderTimer) {\r\n      this.renderTimer = window.setInterval(() => this._renderVideoFrame(), 10);\r\n    }\r\n  }\r\n\r\n  async pause() {\r\n    this.isPlaying = false;\r\n  this.lastWasPlaying = false;\r\n    this.emit('buffering');\r\n  if (this.audioCtx && String(this.audioCtx.state as any) === 'running') {\r\n      await this.audioCtx.suspend();\r\n    }\r\n  if (this.renderTimer) { window.clearInterval(this.renderTimer); this.renderTimer = undefined; }\r\n  }\r\n\r\n  async stop() {\r\n    this.isPlaying = false;\r\n  this.lastWasPlaying = false;\r\n    this.emit('ended');\r\n  // 停止所有已调度的音频节点\r\n  this._stopAllAudioSources();\r\n  try { await (this.videoDecoder?.flush?.() || Promise.resolve()); } catch {}\r\n  try { await (this.audioDecoder?.flush?.() || Promise.resolve()); } catch {}\r\n  try { this.videoDecoder?.close?.(); } catch {}\r\n  try { this.audioDecoder?.close?.(); } catch {}\r\n  this.videoDecoder = undefined; this.audioDecoder = undefined; this.audioConfigured = false;\r\n    if (this.audioCtx) {\r\n      await this.audioCtx.close();\r\n      this.audioCtx = undefined;\r\n    }\r\n  if (this.renderTimer) { window.clearInterval(this.renderTimer); this.renderTimer = undefined; }\r\n  // 清空队列、重置状态\r\n  this.videoDecodeQueue = [];\r\n  this.audioQueue = [] as any[];\r\n  this.audioBasePtsUs = undefined;\r\n  this.audioBaseTime = undefined;\r\n  this.audioConfigured = false;\r\n  this.videoReadyForDeltas = false;\r\n  this.pcrBasePtsUs = undefined; this.pcrBaseTime = undefined;\r\n  this.mediaEpochUs = undefined;\r\n  this.softwareVideoActive = false; this.softwareAudioActive = false;\r\n  this.lastVideoPtsUs = undefined;\r\n  this.timelineOffsetUs = 0;\r\n  this.audioScheduledUntilS = 0;\r\n  // 停止卡顿检测\r\n  try { if (this.stallTimer) { window.clearInterval(this.stallTimer); this.stallTimer = undefined; } } catch {}\r\n  }\r\n\r\n  async seek(ms: number) {\r\n    // 向 worker 发送 seek 消息\r\n    if (this.worker) {\r\n  // flush + 清空解码队列与时基，等待新的样本建立\r\n  try { await (this.videoDecoder?.flush?.() || Promise.resolve()); } catch {}\r\n  try { await (this.audioDecoder?.flush?.() || Promise.resolve()); } catch {}\r\n  // 停止所有已调度的音频节点\r\n  this._stopAllAudioSources();\r\n  this.videoDecodeQueue = [];\r\n  this.audioQueue = [] as any[];\r\n  this.audioBasePtsUs = undefined; this.audioBaseTime = undefined;\r\n  this.pcrBasePtsUs = undefined; this.pcrBaseTime = undefined;\r\n  this.videoBasePtsUs = undefined; this.videoBaseTime = undefined;\r\n  this.mediaEpochUs = undefined;\r\n  this.videoReadyForDeltas = false;\r\n  this.lastVideoPtsUs = undefined;\r\n  this.audioScheduledUntilS = 0;\r\n      this.worker.postMessage({ type: 'seek', ms, generationId: this.generationId });\r\n      this.emit('buffering');\r\n    }\r\n    // 可扩展：清空队列、等待新 sample\r\n    // 连续时间轴：seek 到绝对时间\r\n    if (this.continuousTimeline) {\r\n      this.timelineOffsetUs = Math.max(0, Math.floor(Number(ms) || 0) * 1000);\r\n    }\r\n  }\r\n  // 速率控制\r\n  setPlaybackRate(rate: number) {\r\n  this.targetPlaybackRate = Math.max(0.25, Math.min(4.0, Number(rate) || 1));\r\n  this._ensurePlaybackRateTimer();\r\n  // 立即应用到当前已调度的音频节点（随后定时器继续平滑靠近）\r\n  this._applyPlaybackRateToSources();\r\n    // 可扩展：视频帧时间戳缩放\r\n  }\r\n\r\n  setMuted(m: boolean) {\r\n    this.muted = !!m; this._applyGain();\r\n  }\r\n  setVolume(v: number) {\r\n    this.volume = Math.max(0, Math.min(1, Number(v)||0)); this._applyGain();\r\n  }\r\n  private _ensureAudioGraph() {\r\n    if (!this.audioCtx) this.audioCtx = new (window.AudioContext)();\r\n    try {\r\n  // 监听状态变化，出现 suspended/interrupted 时尝试恢复\r\n      const ctx: any = this.audioCtx as any;\r\n      if (!(ctx as any).__stateHooked) {\r\n        this.audioCtx!.addEventListener('statechange', () => {\r\n          try {\r\n    if (!this.audioCtx) return;\r\n  const st = String((this.audioCtx.state as any) || '');\r\n  if (st === 'suspended' || st === 'interrupted') this._ensureAudioUnlocked();\r\n          } catch {}\r\n        });\r\n        (ctx as any).__stateHooked = true;\r\n      }\r\n    } catch {}\r\n    if (!this.gainNode && this.audioCtx) {\r\n      this.gainNode = this.audioCtx.createGain();\r\n      this.gainNode.connect(this.audioCtx.destination);\r\n    }\r\n    this._applyGain();\r\n  }\r\n  // 记录最近一次活动（用于卡顿检测）\r\n  private _markActivity() { try { this.lastActivityTsMs = (typeof performance !== 'undefined' ? performance.now() : Date.now()); } catch {} }\r\n\r\n  // 周期性监测缓冲状态：依据已调度音频提前量与视频队列\r\n  private _ensureStallMonitor() {\r\n    try {\r\n      if (this.stallTimer) return;\r\n      this.stallTimer = window.setInterval(() => {\r\n        try {\r\n          // 仅在会话存在时评估\r\n          const nowS = this.audioCtx ? this.audioCtx.currentTime : (performance.now() / 1000);\r\n          const audioAheadS = this.audioCtx ? Math.max(0, this.audioScheduledUntilS - nowS) : 0;\r\n          const vq = this.videoDecodeQueue.length;\r\n          const hasAudio = !!this.audioDecoder && this.audioConfigured;\r\n          let buffering = false;\r\n          if (this.isPlaying) {\r\n            if (hasAudio) {\r\n              buffering = (audioAheadS < this.stallMinAudioAheadS) && (vq < 1);\r\n            } else {\r\n              const idleMs = (typeof performance !== 'undefined' ? performance.now() : Date.now()) - (this.lastActivityTsMs || 0);\r\n              buffering = (vq < 1) && (idleMs > this.stallNoAudioIdleMs);\r\n            }\r\n          }\r\n          if (buffering !== this.lastBufferingState) {\r\n            this.lastBufferingState = buffering;\r\n            this.emit(buffering ? 'buffering' : 'playing');\r\n          }\r\n        } catch {}\r\n      }, 250);\r\n    } catch {}\r\n  }\r\n  private _applyGain() {\r\n    if (!this.gainNode) return;\r\n    const val = this.muted ? 0 : this.volume;\r\n    try { this.gainNode.gain.value = val; } catch { /* ignore */ }\r\n  }\r\n\r\n  async openMP4(initBuffer: ArrayBuffer) {\r\n  if (!this.worker) this._setupWorker();\r\n  this.generationId++;\r\n  // send init segment to worker for parsing\r\n  this.lastSource = { kind: 'mp4-init', buffer: initBuffer };\r\n  this.worker?.postMessage({ type: 'openMP4', buffer: initBuffer, generationId: this.generationId }, [initBuffer]);\r\n  }\r\n\r\n  // 读取运行时统计数据（浅拷贝，避免外部修改）\r\n  getStats() {\r\n    return { ...this.stats, videoQueue: this.videoDecodeQueue.length };\r\n  }\r\n\r\n  // 可 seek 范围：VOD 返回 [0, duration]；LIVE 返回 [0, undefined]\r\n  getSeekable() {\r\n    const dur = this.getDurationMs();\r\n    if (typeof dur === 'number' && dur > 0) return { startMs: 0, endMs: dur, isLive: false } as const;\r\n    return { startMs: 0, endMs: undefined, isLive: true } as const;\r\n  }\r\n\r\n  // 当前播放时间（毫秒，基于音频或 PCR 时钟）\r\n  getCurrentTimeMs(): number | undefined {\r\n    const nowUs = this._getClockNowUs();\r\n  if (nowUs === undefined || !Number.isFinite(nowUs) || Math.abs(nowUs) > 1e12) return undefined;\r\n  const totalUs = this.continuousTimeline ? (this.timelineOffsetUs + nowUs) : nowUs;\r\n  return totalUs / 1000;\r\n  }\r\n\r\n  getDurationMs(): number | undefined { return this.mediaDurationMs; }\r\n\r\n  // —— 运行时调参 API ——\r\n  // 预解码窗口（毫秒）\r\n  setLookAheadMs(ms: number) { this.__lookAheadUs = this.MS_TO_US(Math.max(0, Number(ms) || 0)); }\r\n  // 落后丢帧窗口（毫秒）\r\n  setDropWindowMs(ms: number) { this.__dropWindowUs = this.MS_TO_US(Math.max(0, Number(ms) || 0)); }\r\n  // 超前立即绘制阈值（毫秒）\r\n  setLeadWindowMs(ms: number) { this.__leadWindowUs = this.MS_TO_US(Math.max(0, Number(ms) || 0)); }\r\n  // 解码器 in-flight 上限\r\n  setMaxVideoInFlight(n: number) { this.__maxVideoInFlight = Math.max(1, Math.floor(Number(n) || 1)); }\r\n  // 待解码队列上限\r\n  setMaxVideoQueue(n: number) { this.__maxVideoQueue = Math.max(30, Math.floor(Number(n) || 30)); }\r\n  // 缓冲监控阈值：有音频时的最小“已排程前瞻时间”（秒）与无音频时的空闲阈值（毫秒）\r\n  setStallThresholds(minAudioAheadS: number, noAudioIdleMs: number) {\r\n    this.stallMinAudioAheadS = Math.max(0, Number(minAudioAheadS) || 0);\r\n    this.stallNoAudioIdleMs = Math.max(0, Math.floor(Number(noAudioIdleMs) || 0));\r\n  }\r\n  // 设置引导喂入参数\r\n  setBootstrapFeed(limitMs: number, maxFrames: number) {\r\n    this.__bootstrapLimitUs = this.MS_TO_US(Math.max(0, Number(limitMs) || 0));\r\n    this.__bootstrapMax = Math.max(0, Math.floor(Number(maxFrames) || 0));\r\n  }\r\n  // 开关：是否在音频未建立前使用 PCR 作为临时时钟\r\n  setUsePcrBeforeAudio(on: boolean) { this.usePcrBeforeAudio = !!on; }\r\n  // 开关：是否启用连续时间轴（UI 连续）\r\n  setContinuousTimeline(on: boolean) { this.continuousTimeline = !!on; }\r\n  // 查询：当前缓冲/队列状态\r\n  getBufferState() {\r\n    const nowS = this.audioCtx ? this.audioCtx.currentTime : (performance.now() / 1000);\r\n    const audioAheadS = this.audioCtx ? Math.max(0, this.audioScheduledUntilS - nowS) : 0;\r\n    return {\r\n      audioAheadS,\r\n      videoQueued: this.videoDecodeQueue.length,\r\n      maxVideoQueue: this.__maxVideoQueue,\r\n      inFlightCap: this.__maxVideoInFlight\r\n    };\r\n  }\r\n  // 查询：播放参数\r\n  getPlaybackRate() { return this.playbackRate; }\r\n  getMuted() { return this.muted; }\r\n  getVolume() { return this.volume; }\r\n  getVideoQueueSize() { return this.videoDecodeQueue.length; }\r\n  getAudioConfiguredInfo() { return { sampleRate: this.audioConfiguredSampleRate, channels: this.audioConfiguredChannels }; }\r\n  // 查询：相对音频主钟的当前视频帧漂移估计（us），若无基准返回 undefined\r\n  getVideoDriftUs(): number | undefined {\r\n    try {\r\n      if (!this.audioCtx || this.audioBasePtsUs === undefined || this.audioBaseTime === undefined || this.lastVideoPtsUs === undefined) return undefined;\r\n      const nowS = this.audioCtx.currentTime;\r\n      const nowMediaUs = this.audioBasePtsUs + Math.max(0, (nowS - this.audioBaseTime)) * 1e6 * Math.max(0.01, this.playbackRate);\r\n      return this.lastVideoPtsUs - nowMediaUs;\r\n    } catch { return undefined; }\r\n  }\r\n  // 查询：是否认为处于缓冲中（来自最近一次评估）\r\n  isBuffering(): boolean { return !!this.lastBufferingState; }\r\n\r\n  // 起播位置（毫秒），仅对 HLS VOD 生效：在 load(url) 前设置\r\n  private startPositionMs?: number;\r\n  setStartPositionMs(ms?: number) { this.startPositionMs = (typeof ms === 'number' && ms >= 0) ? Math.floor(ms) : undefined; }\r\n\r\n  // 快速跳到直播尾（HLS live）\r\n  goLive() { try { this.worker?.postMessage({ type: 'seek', ms: Number.MAX_SAFE_INTEGER, generationId: this.generationId }); this.emit('buffering'); } catch {} }\r\n\r\n  // 重新附加画布（可选切换渲染器）\r\n  attachCanvas(canvas: HTMLCanvasElement, renderer?: '2d'|'webgl') {\r\n    try {\r\n      // 解绑旧画布解锁事件\r\n      const old = this.canvas as any;\r\n      if (old && old.__unlockHooked && old.__unlockHandler) {\r\n        try { old.removeEventListener('pointerdown', old.__unlockHandler); } catch {}\r\n        try { old.removeEventListener('click', old.__unlockHandler); } catch {}\r\n        old.__unlockHooked = false; old.__unlockHandler = undefined;\r\n      }\r\n    } catch {}\r\n    this.canvas = canvas;\r\n    if (renderer) this.setRenderer(renderer);\r\n    // 新画布挂载解锁事件\r\n    try {\r\n      const el = this.canvas as any;\r\n      if (el && !el.__unlockHooked) {\r\n        const unlock = () => { try { this._ensureAudioUnlocked(); } catch {} };\r\n        el.addEventListener('pointerdown', unlock, { passive: true });\r\n        el.addEventListener('click', unlock, { passive: true });\r\n        el.__unlockHooked = true; el.__unlockHandler = unlock;\r\n      }\r\n    } catch {}\r\n  }\r\n\r\n  // 切换渲染器实现\r\n  setRenderer(kind: '2d'|'webgl') {\r\n    try {\r\n      if (kind === 'webgl') {\r\n        try {\r\n          // eslint-disable-next-line @typescript-eslint/no-var-requires\r\n          const ModGL = require('./renderer-webgl');\r\n          this.renderer2D = new ModGL.RendererWebGL(this.canvas);\r\n        } catch {\r\n          // eslint-disable-next-line @typescript-eslint/no-var-requires\r\n          const Mod2D = require('./renderer-2d');\r\n          this.renderer2D = new Mod2D.Renderer2D(this.canvas);\r\n        }\r\n      } else {\r\n        // eslint-disable-next-line @typescript-eslint/no-var-requires\r\n        const Mod2D = require('./renderer-2d');\r\n        this.renderer2D = new Mod2D.Renderer2D(this.canvas);\r\n      }\r\n    } catch {}\r\n  }\r\n\r\n  // 彻底销毁，释放所有资源（包括 worker）\r\n  async destroy() {\r\n    try { await this.stop(); } catch {}\r\n    try {\r\n      if (this.worker) { try { this.worker.terminate(); } catch {} this.worker = undefined; }\r\n    } catch {}\r\n    // 解绑画布事件\r\n    try {\r\n      const el = this.canvas as any;\r\n      if (el && el.__unlockHooked && el.__unlockHandler) {\r\n        try { el.removeEventListener('pointerdown', el.__unlockHandler); } catch {}\r\n        try { el.removeEventListener('click', el.__unlockHandler); } catch {}\r\n        el.__unlockHooked = false; el.__unlockHandler = undefined;\r\n      }\r\n    } catch {}\r\n    // 清理统计与监控定时器\r\n    try { if (this.statsTimer) { window.clearInterval(this.statsTimer); this.statsTimer = undefined; } } catch {}\r\n    try { if (this.stallTimer) { window.clearInterval(this.stallTimer); this.stallTimer = undefined; } } catch {}\r\n    // 页面可见性监听清理（全局一次性挂载，尽量也在销毁时清理）\r\n    try {\r\n      if ((window as any).__pc_vis_hooked && (window as any).__pc_vis_handler) {\r\n        document.removeEventListener('visibilitychange', (window as any).__pc_vis_handler);\r\n        (window as any).__pc_vis_hooked = false;\r\n        (window as any).__pc_vis_handler = undefined;\r\n      }\r\n    } catch {}\r\n  }\r\n\r\n  private _setupWorker() {\r\n    // 防缓存：为 worker.js 附加版本参数，避免浏览器用旧脚本\r\n    try {\r\n  // 每次创建都生成新的随机版本号，防止 HMR/ServiceWorker 复用旧 worker 缓存\r\n  const bust = Date.now().toString(36) + Math.random().toString(36).slice(2, 8);\r\n      // 优先使用当前构建输出 dist/index.js；如不可用再回退根目录 worker.js\r\n      const url1 = `dist/index.js?v=${bust}`;\r\n      try {\r\n        this.worker = new Worker(url1, { type: 'module' as any });\r\n      } catch (e) {\r\n        const url2 = `worker.js?v=${bust}`;\r\n        this.worker = new Worker(url2);\r\n      }\r\n    } catch {\r\n      // 兜底（极少数环境不允许上面代码时）\r\n      this.worker = new Worker('worker.js');\r\n    }\r\n    this.worker.onmessage = (ev: MessageEvent) => this._onWorker(ev.data);\r\n    this.worker.onerror = (ev: ErrorEvent) => {\r\n      console.error('[PlayerCore] worker error', ev);\r\n      this._restartWorker();\r\n    };\r\n  }\r\n\r\n  // worker crash 自动重启，恢复当前 generationId\r\n  private _restartWorker(): void {\r\n    if (this.worker) {\r\n      try { this.worker.terminate(); } catch(e) {}\r\n      this.worker = undefined;\r\n    }\r\n    // 清空状态，避免旧帧/时基污染\r\n    try { if (this.videoDecoder) { this.videoDecoder.close(); } } catch {}\r\n    try { if (this.audioDecoder) { this.audioDecoder.close(); } } catch {}\r\n    this.videoDecoder = undefined;\r\n    this.audioDecoder = undefined;\r\n  this.audioConfigured = false;\r\n    this.videoDecodeQueue = [];\r\n    this.audioQueue = [] as any[];\r\n    this.audioBasePtsUs = undefined;\r\n    this.audioBaseTime = undefined;\r\n  this.videoReadyForDeltas = false;\r\n  this.pcrBasePtsUs = undefined; this.pcrBaseTime = undefined;\r\n  this.softwareVideoActive = false; this.softwareAudioActive = false;\r\n  this.lastVideoPtsUs = undefined;\r\n  this.audioScheduledUntilS = 0;\r\n  this._stopAllAudioSources();\r\n    if (this.renderTimer) { window.clearInterval(this.renderTimer); this.renderTimer = undefined; }\r\n\r\n    this._setupWorker();\r\n    // 自动恢复会话（仅针对 URL 源；mp4-init 为大缓冲，默认不复用以避免内存占用）\r\n    if (this.lastSource) {\r\n      this.generationId++;\r\n      if (this.lastSource.kind === 'hls' && this.lastSource.url) {\r\n        const startSeq = (typeof this.lastHlsSeq === 'number') ? Math.max(0, this.lastHlsSeq) : undefined;\r\n        this.worker?.postMessage({ type: 'openHLS', url: this.lastSource.url, startSeq, generationId: this.generationId });\r\n      } else if (this.lastSource.kind === 'flv' && this.lastSource.url) {\r\n        this.worker?.postMessage({ type: 'openFLV', url: this.lastSource.url, generationId: this.generationId });\r\n      } else if (this.lastSource.kind === 'mp4-url' && this.lastSource.url) {\r\n        this.worker?.postMessage({ type: 'open', url: this.lastSource.url, generationId: this.generationId });\r\n      } else if (this.lastSource.kind === 'mp4-init' && this.lastSource.buffer) {\r\n        // 出于内存考虑，默认不自动复用 init Buffer；如需可放开此分支\r\n        // this.worker?.postMessage({ type: 'openMP4', buffer: this.lastSource.buffer, generationId: this.generationId }, [this.lastSource.buffer]);\r\n      }\r\n    }\r\n    if (this.lastWasPlaying) {\r\n      // 重新启动渲染循环，让解码/输出尽快恢复\r\n      if (!this.renderTimer) this.renderTimer = window.setInterval(() => this._renderVideoFrame(), 10);\r\n    }\r\n  }\r\n\r\n  private _onWorker(msg: any): void {\r\n    // generationId 校验，防止旧消息污染新会话\r\n    if (!msg || typeof msg !== 'object') return;\r\n    if ('generationId' in msg && msg.generationId !== this.generationId) {\r\n      // 丢弃旧代际消息\r\n      return;\r\n    }\r\n    // basic dispatch for stage1 & HLS\r\n  switch (msg.type) {\r\n      case 'buffering':\r\n        this.emit('buffering');\r\n        break;\r\n      case 'playing':\r\n        this.emit('playing');\r\n        break;\r\n      case 'ended':\r\n      case 'eos':\r\n        // 结束：停止渲染与音频节点\r\n        try { if (this.renderTimer) { window.clearInterval(this.renderTimer); this.renderTimer = undefined; } } catch {}\r\n        this._stopAllAudioSources();\r\n        this.emit('ended');\r\n        break;\r\n      case 'ready-mp4':\r\n        // ...existing code...\r\n        // 启动视频渲染定时器（以音频时钟驱动）\r\n  if (!this.renderTimer) {\r\n          this.renderTimer = window.setInterval(() => this._renderVideoFrame(), 10);\r\n        }\r\n  try { if (msg.info && typeof msg.info.durationMs === 'number' && msg.info.durationMs > 0) this.mediaDurationMs = msg.info.durationMs; } catch {}\r\n        // 音频解码器配置（仅当有 audio 信息且支持 WebCodecs）\r\n  if (msg.info && msg.info.audio && typeof (window as any).AudioDecoder !== 'undefined') {\r\n          try {\r\n            this.audioCtx = this.audioCtx || new (window.AudioContext)();\r\n            const desc = msg.info.audio.description || msg.info.audio.asc || null;\r\n            // 如果参数变化则重新配置\r\n            if (this.audioDecoder) {\r\n              try { (this.audioDecoder as any).close(); } catch(e) {}\r\n              this.audioDecoder = undefined;\r\n            }\r\n              this.audioDecoder = new (window as any).AudioDecoder({\r\n                output: (frame: any) => {\r\n                  try {\r\n                    this.audioCtx = this.audioCtx || new (window.AudioContext)();\r\n                    const numberOfChannels = (frame.numberOfChannels) || (frame.format && frame.format.channels) || 2;\r\n                    const sampleRate = frame.sampleRate || 48000;\r\n                    const frameCount = frame.numberOfFrames || frame.frameCount || 0;\r\n                    // 如检测到真实采样率与当前配置不一致，则热重配\r\n                    try {\r\n                      if (this.audioConfigured && this.audioConfiguredSampleRate && sampleRate && Math.abs(sampleRate - this.audioConfiguredSampleRate) >= 1) {\r\n                        const old = this.audioDecoder; this.audioDecoder = undefined; this.audioConfigured = false;\r\n                        try { old?.close?.(); } catch {}\r\n                        const ad = new (window as any).AudioDecoder({\r\n                          output: (f2: any) => {\r\n                            try {\r\n                              // 复用现有输出逻辑的简版（避免重复太多）\r\n                              const nCh = (f2.numberOfChannels) || 2;\r\n                              const sR = f2.sampleRate || sampleRate;\r\n                              const fcnt = f2.numberOfFrames || 0;\r\n                              let framePtsUs2: number | undefined = undefined;\r\n                              if (typeof f2.timestamp === 'number') framePtsUs2 = this.normalizeTsToUs(f2.timestamp);\r\n                              this._ensureAudioGraph();\r\n                              const abuf = this.audioCtx!.createBuffer(nCh, fcnt, sR);\r\n                              for (let ch = 0; ch < nCh; ch++) { const cd = new Float32Array(fcnt); try { f2.copyTo(cd, { planeIndex: ch }); } catch { f2.copyTo(cd); } abuf.copyToChannel(cd, ch, 0); }\r\n                              const src2 = this.audioCtx!.createBufferSource(); src2.buffer = abuf; src2.connect(this.gainNode!);\r\n                              this._registerAudioSource(src2);\r\n                              try { (src2 as any).playbackRate.value = this.playbackRate; } catch {}\r\n                              if (this.audioBasePtsUs !== undefined && framePtsUs2 !== undefined && this.audioBaseTime !== undefined) {\r\n                                const offsetS = this.US_TO_S(framePtsUs2 - this.audioBasePtsUs);\r\n                                const when = Math.max(this.audioCtx!.currentTime, this.audioBaseTime + offsetS);\r\n                                const now = this.audioCtx!.currentTime; const durS = (fcnt / sR) / Math.max(0.01, this.playbackRate);\r\n                                if (when <= now + 0.02) { src2.start(); this.audioScheduledUntilS = Math.max(this.audioScheduledUntilS, now + durS); } else { try { src2.start(when); } catch { src2.start(); } this.audioScheduledUntilS = Math.max(this.audioScheduledUntilS, when + durS); }\r\n                                try { this._markActivity(); } catch {}\r\n                              } else { src2.start(); }\r\n                            } catch {}\r\n                            finally { try { f2.close(); } catch {} }\r\n                          },\r\n                          error: (e: any) => console.error('AudioDecoder error (reconfig)', e)\r\n                        });\r\n                        const nChCfg = this.audioConfiguredChannels || numberOfChannels;\r\n                        const cfg2: any = { codec: this.audioLastCodec || 'mp4a.40.2', numberOfChannels: nChCfg, sampleRate: sampleRate };\r\n                        if (this.audioLastDescription) cfg2.description = this.audioLastDescription;\r\n                        try {\r\n                          const ACtor: any = (window as any).AudioDecoder;\r\n                          if (ACtor.isConfigSupported) { ACtor.isConfigSupported(cfg2).then((res: any) => { try { ad.configure(res?.config || cfg2); } catch { ad.configure(cfg2); } }).catch(() => { ad.configure(cfg2); }); }\r\n                          else { ad.configure(cfg2); }\r\n                        } catch { ad.configure(cfg2); }\r\n                        this.audioDecoder = ad; this.audioConfigured = true; this.audioConfiguredSampleRate = sampleRate; this.audioConfiguredChannels = nChCfg;\r\n                        try { if ((window as any).__DEMO_DEBUG) console.warn('[audio] hot reconfig to sampleRate=', sampleRate); } catch {}\r\n                      }\r\n                    } catch {}\r\n                    // determine frame timestamp in microseconds\r\n                    let framePtsUs: number | undefined = undefined;\r\n                    if (typeof frame.timestamp === 'number') {\r\n                      framePtsUs = this.normalizeTsToUs(frame.timestamp);\r\n                    }\r\n\r\n                    // init audio base mapping (zero baseline) if not set and we have a timestamp\r\n                    if (framePtsUs !== undefined && this.audioBasePtsUs === undefined) {\r\n                      this.audioBasePtsUs = 0;\r\n                      this.audioBaseTime = this.audioCtx.currentTime + 0.20; // 更大安全偏移，减少调度抖动\r\n                      // 一旦音频时基建立，清除 PCR/视频临时时钟，防止误用\r\n                      this.pcrBasePtsUs = undefined; this.pcrBaseTime = undefined;\r\n                      this.videoBasePtsUs = undefined; this.videoBaseTime = undefined;\r\n                      try { if ((window as any).__DEMO_DEBUG) console.debug('[clock] audio base set (zero) at', this.audioBaseTime); } catch {}\r\n                    }\r\n\r\n                    const audioBuffer = this.audioCtx.createBuffer(numberOfChannels, frameCount, sampleRate);\r\n                    for (let ch = 0; ch < numberOfChannels; ch++) {\r\n                      try {\r\n                        const channelData = new Float32Array(frameCount);\r\n                        if (typeof frame.copyTo === 'function') {\r\n                          try { frame.copyTo(channelData, { planeIndex: ch }); } catch (e) { frame.copyTo(channelData); }\r\n                        }\r\n                        audioBuffer.copyToChannel(channelData, ch, 0);\r\n                      } catch (e) { console.warn('audio channel copy failed', e); }\r\n                    }\r\n\r\n                    this._ensureAudioGraph();\r\n                    const src = this.audioCtx.createBufferSource();\r\n                    src.buffer = audioBuffer;\r\n                    src.connect(this.gainNode!);\r\n                    this._registerAudioSource(src);\r\n\r\n                    // scheduling: compute desired start time based on pts mapping\r\n                    if (framePtsUs !== undefined && (this.audioBaseTime !== undefined || (this.audioBaseTime === undefined && (this.audioBaseTime = this.audioCtx!.currentTime + 0.20)))) {\r\n                      // 统一 0 轴：audioBasePtsUs 固定为 0\r\n                      this.audioBasePtsUs = 0;\r\n                      const offsetS = this.US_TO_S(framePtsUs - (this.audioBasePtsUs ?? 0)) / Math.max(0.01, this.playbackRate);\r\n                      const when = Math.max(this.audioCtx!.currentTime, this.audioBaseTime + offsetS);\r\n                      // if when is in the past, start immediately; else schedule\r\n                      const now = this.audioCtx!.currentTime;\r\n                      const durS = (frameCount / sampleRate) / Math.max(0.01, this.playbackRate);\r\n                      if (when <= now + 0.02) {\r\n                        src.start();\r\n                        this.audioScheduledUntilS = Math.max(this.audioScheduledUntilS, now + durS);\r\n                      } else {\r\n                        try { src.start(when); } catch (e) { src.start(); }\r\n                        this.audioScheduledUntilS = Math.max(this.audioScheduledUntilS, when + durS);\r\n                      }\r\n                      try { (src as any).playbackRate.value = this.playbackRate; } catch {}\r\n                      try { this._markActivity(); } catch {}\r\n                    } else {\r\n                      // 没有可用的 pts 或其他原因，立即播放并推进已调度窗口\r\n                      src.start();\r\n                      try {\r\n                        const now = this.audioCtx!.currentTime;\r\n                        const durS = (frameCount / sampleRate) / Math.max(0.01, this.playbackRate);\r\n                        this.audioScheduledUntilS = Math.max(this.audioScheduledUntilS, now + durS);\r\n                        this._markActivity();\r\n                      } catch {}\r\n                    }\r\n                  } catch (e) {\r\n                    console.warn('AudioDecoder output handling failed', e);\r\n                  } finally {\r\n                    try { frame.close(); } catch (e) {}\r\n                  }\r\n                },\r\n        error: (e: any) => console.error('AudioDecoder error', e)\r\n              });\r\n    const codec = msg.info.audio.codec || 'mp4a.40.2';\r\n    const cfg: any = { codec };\r\n    if (desc) cfg.description = desc;\r\n    // 严格使用 worker 参数（若缺失再退默认）\r\n    const numCh = (msg.info.audio && (msg.info.audio.numberOfChannels ?? (msg.info.audio as any).channels)) || 2;\r\n    const sRate = (msg.info.audio && (msg.info.audio.sampleRate ?? (msg.info.audio as any).samplerate)) || 44100;\r\n    cfg.numberOfChannels = numCh;\r\n    cfg.sampleRate = sRate;\r\n            (this.audioDecoder as any).configure(cfg);\r\n      this.audioConfigured = true;\r\n  this.audioConfiguredSampleRate = sRate; this.audioConfiguredChannels = numCh;\r\n  this.audioLastCodec = codec; this.audioLastDescription = desc || null;\r\n          } catch (e) { console.warn('AudioDecoder configure failed', e); }\r\n        }\r\n        // 视频解码器配置（如有 video 信息且支持 WebCodecs）\r\n  if (msg.info && msg.info.video && typeof (window as any).VideoDecoder !== 'undefined') {\r\n          try {\r\n            const desc = msg.info.video.description || msg.info.video.avcC || null;\r\n            // 从 avcC/description 缓存 SPS/PPS，便于关键帧注入\r\n            if (desc) { try { this._cacheSpsPpsFromAvcC(desc); } catch {} }\r\n            // 如果参数变化则重新配置\r\n            if (this.videoDecoder) {\r\n              try { (this.videoDecoder as any).close(); } catch(e) {}\r\n              this.videoDecoder = undefined;\r\n            }\r\n            this.videoReadyForDeltas = false;\r\n            this.videoDecoder = new (window as any).VideoDecoder({\r\n              output: (frame: any) => {\r\n                try { if ((window as any).__DEMO_DEBUG) console.debug('[vdec] output frame ts(us)=', typeof frame.timestamp==='number'? this.normalizeTsToUs(frame.timestamp): 'n/a'); } catch {}\r\n                // 若尚无音频时钟与视频墙钟，使用首帧视频建立“墙钟回退”\r\n                try {\r\n                  if (this.audioBasePtsUs === undefined && (this.videoBasePtsUs === undefined || this.videoBaseTime === undefined)) {\r\n                    if (typeof frame.timestamp === 'number') {\r\n                      const ptsUs = Math.max(0, this.normalizeTsToUs(frame.timestamp));\r\n                      this.videoBasePtsUs = ptsUs;\r\n                      this.videoBaseTime = performance.now() / 1000;\r\n                      try { if ((window as any).__DEMO_DEBUG) console.debug('[clock] video wall-clock base set us=', ptsUs, ' t0=', this.videoBaseTime); } catch {}\r\n                    }\r\n                  }\r\n                } catch {}\r\n                // 基于音频主钟的呈现调度\r\n                const doDraw = () => {\r\n                  try {\r\n                    // ensure canvas size matches frame\r\n                    if (this.canvas && (this.canvas.width !== frame.codedWidth || this.canvas.height !== frame.codedHeight)) {\r\n                      this.canvas.width = frame.codedWidth;\r\n                      this.canvas.height = frame.codedHeight;\r\n                    }\r\n                    if (this.renderer2D && this.renderer2D.draw) {\r\n                      try { this.renderer2D.draw(frame); } catch {}\r\n                    } else {\r\n                      const ctx = (this.canvas && this.canvas.getContext) ? this.canvas.getContext('2d') : null;\r\n                      if (ctx) {\r\n                        try { ctx.drawImage(frame, 0, 0, this.canvas.width, this.canvas.height); }\r\n                        catch {\r\n                          try {\r\n                            createImageBitmap(frame).then((bmp) => {\r\n                              try { ctx.drawImage(bmp, 0, 0, this.canvas.width, this.canvas.height); } catch {}\r\n                              try { bmp.close(); } catch {}\r\n                            }).catch(()=>{});\r\n                          } catch {}\r\n                        }\r\n                      }\r\n                    }\r\n                  } catch (e) { /* ignore draw error */ }\r\n                  finally { try { frame.close(); } catch {} this.stats.framesDrawn++; try { if ((window as any).__DEMO_DEBUG) console.debug('[draw] framesDrawn=', this.stats.framesDrawn); } catch {} try { this._markActivity(); } catch {} }\r\n                };\r\n\r\n                try {\r\n                  const ptsUs = typeof frame.timestamp === 'number' ? this.normalizeTsToUs(frame.timestamp) : undefined;\r\n                  if (ptsUs !== undefined && this.lastVideoPtsUs !== undefined && ptsUs < this.lastVideoPtsUs) {\r\n                    try { frame.close(); } catch {}\r\n                    this.videoReadyForDeltas = true;\r\n                    return;\r\n                  }\r\n                  const drawWithUpdate = () => { doDraw(); if (ptsUs !== undefined) this.lastVideoPtsUs = ptsUs; };\r\n                  if (ptsUs !== undefined && this.audioBasePtsUs !== undefined && this.audioBaseTime !== undefined && this.audioCtx) {\r\n                    const nowS = this.audioCtx.currentTime;\r\n                    const nowMediaUs = this.audioBasePtsUs + Math.max(0, (nowS - this.audioBaseTime)) * 1e6;\r\n                    const driftUs = ptsUs - nowMediaUs;\r\n                    if (driftUs < -this.__dropWindowUs) {\r\n                      // 严重落后，直接丢弃本帧\r\n                      try { frame.close(); } catch {}\r\n                      this.videoReadyForDeltas = true;\r\n                      return;\r\n                    }\r\n                    if (driftUs > this.__leadWindowUs) {\r\n                      // 严重超前，立即绘制一次，不再等待\r\n                      drawWithUpdate();\r\n                    } else {\r\n                      const targetS = this.audioBaseTime + this.US_TO_S(ptsUs - this.audioBasePtsUs) / Math.max(0.01, this.playbackRate);\r\n                      const delayMs = Math.max(0, (targetS - nowS) * 1000);\r\n                      if (delayMs > 1) {\r\n                        setTimeout(drawWithUpdate, Math.min(delayMs, 50));\r\n                      } else {\r\n                        drawWithUpdate();\r\n                      }\r\n                    }\r\n                  } else {\r\n                    drawWithUpdate();\r\n                  }\r\n                } catch { doDraw(); }\r\n                this.videoReadyForDeltas = true;\r\n              },\r\n              error: (e: any) => {\r\n                console.error('VideoDecoder error', e);\r\n                try {\r\n                  this.videoReadyForDeltas = false;\r\n                  // 丢弃到下一个关键帧，避免错误状态持续\r\n                  while (this.videoDecodeQueue.length && !this.videoDecodeQueue[0].key) {\r\n                    this.videoDecodeQueue.shift(); this.stats.framesDropped++;\r\n                  }\r\n                } catch {}\r\n              }\r\n            });\r\n            const codec = msg.info.video.codec || 'avc1.42E01E';\r\n            const cfg: any = { codec, optimizeForLatency: true };\r\n            try { (cfg as any).hardwareAcceleration = 'prefer-hardware'; } catch {}\r\n            // 若 worker 指明 AnnexB，则不要设置 description（避免与 AnnexB 裸流冲突）\r\n            const isAnnexB = !!(msg.info.video as any).annexb;\r\n            if (!isAnnexB && desc) { cfg.description = desc; this.videoDescAttached = true; } else { this.videoDescAttached = false; }\r\n            this.videoCodec = codec;\r\n            // 缓存 avcC 中的 SPS/PPS，便于 AnnexB 关键帧注入\r\n            try { if (desc) this._cacheSpsPpsFromAvcC(desc); } catch {}\r\n            try {\r\n              const Ctor: any = (window as any).VideoDecoder;\r\n              if (Ctor.isConfigSupported) {\r\n                Ctor.isConfigSupported(cfg).then((res: any) => {\r\n                  try { (this.videoDecoder as any).configure(res?.config || cfg); } catch(e) { (this.videoDecoder as any).configure(cfg); }\r\n                }).catch(() => { (this.videoDecoder as any).configure(cfg); });\r\n              } else {\r\n                (this.videoDecoder as any).configure(cfg);\r\n              }\r\n            } catch { (this.videoDecoder as any).configure(cfg); }\r\n          } catch (e) {\r\n            console.warn('VideoDecoder configure failed', e);\r\n            if (this.enableSoftwareFallback) {\r\n              try {\r\n                this.softwareVideoActive = true;\r\n                // TODO: 在此处接入 ffmpeg.wasm 解码管线（占位）\r\n                console.warn('[fallback] switching to software video decode (stub)');\r\n              } catch (e2) { console.warn('software video fallback failed', e2); }\r\n            }\r\n          }\r\n        }\r\n        break;\r\n      case 'hls-playlist':\r\n        // 收到 m3u8 解析结果，调度分片拉取\r\n        if (Array.isArray(msg.segments) && msg.segments.length > 0) {\r\n          // 简单串行拉取所有分片（可扩展为按需/定时调度）\r\n          for (const seg of msg.segments) {\r\n            this.worker?.postMessage({ type: 'fetchSegment', uri: seg.uri });\r\n          }\r\n        }\r\n        break;\r\n      case 'hls-pos':\r\n        if (typeof msg.seq === 'number') this.lastHlsSeq = msg.seq;\r\n        // 可选：根据分片序号维持连续时间轴（需要 msg.segDurationMs）\r\n        if (this.continuousTimeline && typeof msg.segStartMs === 'number') {\r\n          this.timelineOffsetUs = Math.max(0, Math.floor(msg.segStartMs * 1000));\r\n        }\r\n        break;\r\n      case 'duration':\r\n  if (typeof msg.ms === 'number' && msg.ms > 0) this.mediaDurationMs = msg.ms;\r\n        break;\r\n      case 'sample':\r\n        // 统一时间单位与纪元：若本消息中任一时间字段看起来像 90kHz ticks（非常大），\r\n        // 则把该消息的所有时间字段按 ticks->microseconds 统一转换，避免 ts/dts/pcr 单位混用。\r\n        const detectTicks = (v: number | undefined) => (typeof v === 'number' && isFinite(v) && v > 3e9);\r\n        const msgLooksLikeTicks = detectTicks(msg.ts) || detectTicks(msg.dts) || detectTicks((msg as any).pcr);\r\n        const normalizeClock = (v: number | undefined) => {\r\n          if (v === undefined || !isFinite(v)) return undefined;\r\n          if (msgLooksLikeTicks) return Math.round(v * (1e6 / 90000));\r\n          const isProbablyTicks = (v > 3e9);\r\n          return isProbablyTicks ? Math.round(v * (1e6 / 90000)) : Math.round(v);\r\n        };\r\n        if (msg.kind === 'video' || msg.kind === 'audio') {\r\n          const rawTs = normalizeClock(msg.ts)!;\r\n          const rawDts = (typeof msg.dts === 'number') ? normalizeClock(msg.dts)! : undefined;\r\n          const rawPcr = (typeof msg.pcr === 'number') ? normalizeClock(msg.pcr)! : undefined;\r\n          // 首次见到任意样本，确定全局 epoch\r\n          if (this.mediaEpochUs === undefined) this.mediaEpochUs = rawTs;\r\n          // 所有时间戳减 epoch，落到同一 0 起点轴\r\n          msg.ts = rawTs - this.mediaEpochUs;\r\n          if (rawDts !== undefined) msg.dts = rawDts - this.mediaEpochUs;\r\n          if (rawPcr !== undefined) msg.pcr = rawPcr - this.mediaEpochUs;\r\n          // 在音频建立前，可选记录 PCR 基点的“墙钟映射”（不影响媒体轴）\r\n          if (msg.kind === 'video' && this.usePcrBeforeAudio && this.audioBaseTime === undefined && typeof msg.pcr === 'number' && this.pcrBasePtsUs === undefined) {\r\n            this.pcrBasePtsUs = msg.pcr; this.pcrBaseTime = performance.now() / 1000;\r\n          }\r\n        }\r\n        // 视频 sample 入队（解码顺序队列：DTS 优先），等待音频主钟驱动送入解码器\r\n        if (msg.kind === 'video') {\r\n          // 懒配置：若未配置 VideoDecoder，先用稳妥参数配置一个（不带 description）\r\n          if (!this.videoDecoder && typeof (window as any).VideoDecoder !== 'undefined') {\r\n            try {\r\n              const codec = (msg.codec as string) || this.videoCodec || 'avc1.42E01E';\r\n              this.videoCodec = codec;\r\n              const vout = (frame: any) => {\r\n                const doDraw = () => {\r\n                  try {\r\n                    if (this.canvas && (this.canvas.width !== frame.codedWidth || this.canvas.height !== frame.codedHeight)) {\r\n                      this.canvas.width = frame.codedWidth; this.canvas.height = frame.codedHeight;\r\n                    }\r\n                    if (this.renderer2D && this.renderer2D.draw) { try { this.renderer2D.draw(frame); } catch {} }\r\n                    else { const ctx = this.canvas.getContext('2d'); if (ctx) { try { ctx.drawImage(frame, 0, 0, this.canvas.width, this.canvas.height); } catch {} } }\r\n                  } catch {}\r\n                  finally { try { frame.close(); } catch {} this.stats.framesDrawn++; try { this._markActivity(); } catch {} }\r\n                };\r\n                try {\r\n                  const ptsUs = typeof frame.timestamp === 'number' ? this.normalizeTsToUs(frame.timestamp) : undefined;\r\n                  // 若尚无音频/PCR 时钟，且未建立视频墙钟基准，则用首个输出帧建立基准\r\n                  if (ptsUs !== undefined && this.audioBasePtsUs === undefined && this.pcrBasePtsUs === undefined && (this.videoBasePtsUs === undefined || this.videoBaseTime === undefined)) {\r\n                    this.videoBasePtsUs = ptsUs;\r\n                    this.videoBaseTime = performance.now() / 1000;\r\n                    try { if ((window as any).__DEMO_DEBUG) console.warn('[clock] video wall-clock base set from first output ts(us)=', ptsUs); } catch {}\r\n                  }\r\n                  if (ptsUs !== undefined && this.lastVideoPtsUs !== undefined && ptsUs < this.lastVideoPtsUs) {\r\n                      try { frame.close(); } catch {}\r\n                    this.videoReadyForDeltas = true;\r\n                    return;\r\n                  }\r\n                  const drawWithUpdate = () => { doDraw(); if (ptsUs !== undefined) this.lastVideoPtsUs = ptsUs; };\r\n                  if (ptsUs !== undefined && this.audioBasePtsUs !== undefined && this.audioBaseTime !== undefined && this.audioCtx) {\r\n                    const nowS = this.audioCtx.currentTime;\r\n                    const nowMediaUs = this.audioBasePtsUs + Math.max(0, (nowS - this.audioBaseTime)) * 1e6;\r\n                    const driftUs = ptsUs - nowMediaUs;\r\n                    if (driftUs < -this.__dropWindowUs) { try { frame.close(); } catch {} this.videoReadyForDeltas = true; return; }\r\n                    if (driftUs > this.__leadWindowUs) { drawWithUpdate(); }\r\n                    else {\r\n                      const targetS = this.audioBaseTime + this.US_TO_S(ptsUs - this.audioBasePtsUs) / Math.max(0.01, this.playbackRate);\r\n                      const delayMs = Math.max(0, (targetS - nowS) * 1000);\r\n                      if (delayMs > 1) setTimeout(drawWithUpdate, Math.min(delayMs, 50)); else drawWithUpdate();\r\n                    }\r\n                  } else { drawWithUpdate(); }\r\n                } catch { doDraw(); }\r\n                this.videoReadyForDeltas = true;\r\n              };\r\n              const verr = (e: any) => { console.error('VideoDecoder error (lazy)', e); };\r\n              const dec = new (window as any).VideoDecoder({ output: vout, error: verr });\r\n              const cfg: any = { codec, optimizeForLatency: true };\r\n              try { (cfg as any).hardwareAcceleration = 'prefer-hardware'; } catch {}\r\n              const VCtor: any = (window as any).VideoDecoder;\r\n              if (VCtor.isConfigSupported) {\r\n                VCtor.isConfigSupported(cfg)\r\n                  .then((r: any) => { try { dec.configure(r?.config || cfg); } catch { dec.configure(cfg); } })\r\n                  .catch(() => { try { dec.configure(cfg); } catch {} });\r\n              } else { try { dec.configure(cfg); } catch {} }\r\n              this.videoDecoder = dec;\r\n              this.videoDescAttached = false; this.videoReadyForDeltas = false;\r\n              try { if ((window as any).__DEMO_DEBUG) console.warn('[video] lazy configured:', codec); } catch {}\r\n            } catch (e) { console.warn('video lazy-config failed', e); }\r\n          }\r\n          try { if ((window as any).__DEMO_DEBUG) console.debug('[queue] video sample enq, ts(us)=', this.normalizeTsToUs(msg.ts)); } catch {}\r\n          // ts/dts 已经按 epoch 对齐为微秒；无需再次转换\r\n          // 第一次看到视频样本时检测实际格式；如是 AnnexB 且当前配置附带 description，则去掉 description 热重配\r\n          if (!this.firstVideoSeen) {\r\n            this.firstVideoSeen = true;\r\n            try {\r\n              this.annexbDetected = this._isAnnexB(msg.data);\r\n              if (this.annexbDetected && this.videoDescAttached && typeof (window as any).VideoDecoder !== 'undefined') {\r\n                try {\r\n                  const old = this.videoDecoder; this.videoDecoder = undefined; try { old?.close?.(); } catch {}\r\n                  const vdec = new (window as any).VideoDecoder({\r\n                    output: (frame: any) => {\r\n                      try { if ((window as any).__DEMO_DEBUG) console.debug('[vdec] output frame ts(us)=', typeof frame.timestamp==='number'? this.normalizeTsToUs(frame.timestamp): 'n/a'); } catch {}\r\n                      // 与 ready-mp4 路径一致的绘制逻辑\r\n                      const doDraw = () => {\r\n                        try {\r\n                          if (this.canvas && (this.canvas.width !== frame.codedWidth || this.canvas.height !== frame.codedHeight)) { this.canvas.width = frame.codedWidth; this.canvas.height = frame.codedHeight; }\r\n                          if (this.renderer2D && this.renderer2D.draw) { try { this.renderer2D.draw(frame); } catch {} }\r\n                          else { const ctx = (this.canvas && this.canvas.getContext) ? this.canvas.getContext('2d') : null; if (ctx) { try { ctx.drawImage(frame, 0, 0, this.canvas.width, this.canvas.height); } catch {} } }\r\n                        } catch {}\r\n                        finally { try { frame.close(); } catch {} this.stats.framesDrawn++; try { this._markActivity(); } catch {} }\r\n                      };\r\n                      try {\r\n                        const ptsUs = typeof frame.timestamp === 'number' ? this.normalizeTsToUs(frame.timestamp) : undefined;\r\n                        if (ptsUs !== undefined && this.lastVideoPtsUs !== undefined && ptsUs < this.lastVideoPtsUs) {\r\n                          try { frame.close(); } catch {}\r\n                          this.videoReadyForDeltas = true;\r\n                          return;\r\n                        }\r\n                        const drawWithUpdate = () => { doDraw(); if (ptsUs !== undefined) this.lastVideoPtsUs = ptsUs; };\r\n                        if (ptsUs !== undefined && this.audioBasePtsUs !== undefined && this.audioBaseTime !== undefined && this.audioCtx) {\r\n                          const targetS = this.audioBaseTime + this.US_TO_S(ptsUs - this.audioBasePtsUs) / Math.max(0.01, this.playbackRate);\r\n                          const nowS = this.audioCtx.currentTime;\r\n                          const delayMs = Math.max(0, (targetS - nowS) * 1000);\r\n                          if (delayMs > 1) setTimeout(drawWithUpdate, Math.min(delayMs, 50)); else drawWithUpdate();\r\n                        } else { drawWithUpdate(); }\r\n                      } catch { doDraw(); }\r\n                      this.videoReadyForDeltas = true;\r\n                    },\r\n                    error: (e: any) => { console.error('VideoDecoder error (reconfig)', e); }\r\n                  });\r\n                  const cfg2: any = { codec: this.videoCodec || 'avc1.42E01E', optimizeForLatency: true };\r\n                  try { (cfg2 as any).hardwareAcceleration = 'prefer-hardware'; } catch {}\r\n                  const VCtor: any = (window as any).VideoDecoder;\r\n                  if (VCtor && VCtor.isConfigSupported) {\r\n                    VCtor.isConfigSupported(cfg2)\r\n                      .then((res: any) => { try { vdec.configure(res?.config || cfg2); } catch { vdec.configure(cfg2); } })\r\n                      .catch(() => { vdec.configure(cfg2); });\r\n                  } else { vdec.configure(cfg2); }\r\n                  this.videoDecoder = vdec; this.videoDescAttached = false; this.videoReadyForDeltas = false;\r\n                  if ((window as any).__DEMO_DEBUG) { try { console.warn('[video] hot reconfig: remove description for AnnexB'); } catch {} }\r\n                } catch(e) { console.warn('video hot-reconfig failed', e); }\r\n              }\r\n            } catch {}\r\n          }\r\n          // 若既无音频也无 PCR，也还没视频墙钟，用首个视频样本先建立 provisional 墙钟\r\n          if (this.audioBaseTime === undefined && this.pcrBaseTime === undefined && (this.videoBaseTime === undefined || this.videoBasePtsUs === undefined) && typeof msg.ts === 'number' && isFinite(msg.ts)) {\r\n            this.videoBasePtsUs = msg.ts;\r\n            this.videoBaseTime = performance.now() / 1000;\r\n            try { if ((window as any).__DEMO_DEBUG) console.warn('[clock] provisional video wall-clock set from first sample ts(us)=', this.videoBasePtsUs, ' t0=', this.videoBaseTime); } catch {}\r\n          }\r\n\r\n          // 进一步防御：夹紧异常 dts 到 pts 附近\r\n          let safeDts: number | undefined = undefined;\r\n          try {\r\n            if (typeof msg.dts === 'number') {\r\n              const d = Number(msg.dts) || 0;\r\n              const p = Number(msg.ts) || 0;\r\n              if (isFinite(d)) {\r\n                const diff = d - p;\r\n                safeDts = (Math.abs(diff) > 5_000_000 || d < 0) ? p : d;\r\n              }\r\n            }\r\n          } catch {}\r\n          try {\r\n            if ((window as any).__DEMO_DEBUG) {\r\n              console.debug('[enq]', { kind: 'video', ts: msg.ts, dts: safeDts ?? msg.dts, pcr: msg.pcr, baseV: this.videoBasePtsUs, baseA: this.audioBasePtsUs });\r\n            }\r\n          } catch {}\r\n          this.videoDecodeQueue.push({ ts: msg.ts, dts: safeDts, key: !!msg.key, data: msg.data, dur: typeof msg.dur === 'number' ? this.normalizeTsToUs(msg.dur) : undefined });\r\n          if (this.videoDecodeQueue.length > 1) {\r\n            const pick = (s: { ts: number; dts?: number }) => (s.dts ?? s.ts);\r\n            this.videoDecodeQueue.sort((a, b) => pick(a) - pick(b));\r\n          }\r\n          // 高水位背压：超过上限时丢弃最旧的若干帧（按 DTS 排序的队头）\r\n          if (this.videoDecodeQueue.length > this.__maxVideoQueue) {\r\n            const overflow = this.videoDecodeQueue.length - this.__maxVideoQueue;\r\n            this.videoDecodeQueue.splice(0, overflow);\r\n          }\r\n          // 立刻尝试推进一次渲染，并确保渲染循环已启动\r\n          try { this._renderVideoFrame(); } catch {}\r\n          try { if (!this.renderTimer) this.renderTimer = window.setInterval(() => this._renderVideoFrame(), 10); } catch {}\r\n        }\r\n        // 音频 sample 直接解码\r\n  // 懒配置：若未配置 AudioDecoder，先按稳妥参数配置\r\n  if (msg.kind === 'audio' && !this.audioDecoder && typeof (window as any).AudioDecoder !== 'undefined') {\r\n          try {\r\n            const codec = (msg.codec as string) || this.audioLastCodec || 'mp4a.40.2';\r\n            const numCh = (msg.channels as number) || 2;\r\n            const sRate = (msg.sampleRate as number) || 44100;\r\n            this.audioCtx = this.audioCtx || new (window.AudioContext)();\r\n            const ad = new (window as any).AudioDecoder({\r\n              output: (frame: any) => {\r\n                try {\r\n                  try { if (this.audioCtx && String(this.audioCtx.state as any) === 'suspended') this.audioCtx.resume(); } catch {}\r\n                  const numberOfChannels = frame.numberOfChannels || numCh;\r\n                  const sampleRate = frame.sampleRate || sRate;\r\n                  const frameCount = frame.numberOfFrames || frame.frameCount || 0;\r\n                  let framePtsUs: number | undefined = undefined;\r\n                  if (typeof frame.timestamp === 'number') framePtsUs = this.normalizeTsToUs(frame.timestamp);\r\n                  if (framePtsUs !== undefined && this.audioBasePtsUs === undefined) {\r\n                    this.audioBasePtsUs = 0; this.audioBaseTime = this.audioCtx!.currentTime + 0.20;\r\n                    this.pcrBasePtsUs = undefined; this.pcrBaseTime = undefined; this.videoBasePtsUs = undefined; this.videoBaseTime = undefined;\r\n                  }\r\n                  this._ensureAudioGraph();\r\n                  const audioBuffer = this.audioCtx!.createBuffer(numberOfChannels, frameCount, sampleRate);\r\n                  for (let ch = 0; ch < numberOfChannels; ch++) { const channelData = new Float32Array(frameCount); try { frame.copyTo(channelData, { planeIndex: ch }); } catch { frame.copyTo(channelData); } audioBuffer.copyToChannel(channelData, ch, 0); }\r\n                  const src = this.audioCtx!.createBufferSource(); src.buffer = audioBuffer; src.connect(this.gainNode!);\r\n                  this._registerAudioSource(src);\r\n                  if (this.audioBasePtsUs !== undefined && framePtsUs !== undefined && this.audioBaseTime !== undefined) {\r\n                    const offsetS = this.US_TO_S(framePtsUs - (this.audioBasePtsUs ?? 0)) / Math.max(0.01, this.playbackRate);\r\n                    const when = Math.max(this.audioCtx!.currentTime, this.audioBaseTime + offsetS);\r\n                    const now = this.audioCtx!.currentTime; const durS = (frameCount / sampleRate) / Math.max(0.01, this.playbackRate);\r\n                    if (when <= now + 0.02) { src.start(); this.audioScheduledUntilS = Math.max(this.audioScheduledUntilS, now + durS); } else { try { src.start(when); } catch { src.start(); } this.audioScheduledUntilS = Math.max(this.audioScheduledUntilS, when + durS); }\r\n                    try { (src as any).playbackRate.value = this.playbackRate; } catch {}\r\n                    try { this._markActivity(); } catch {}\r\n                  } else { src.start(); }\r\n                } catch (e) { console.warn('AudioDecoder output handling failed (lazy)', e); }\r\n                finally { try { frame.close(); } catch {} }\r\n              },\r\n              error: (e: any) => console.error('AudioDecoder error (lazy)', e)\r\n            });\r\n            const cfg: any = { codec, numberOfChannels: numCh, sampleRate: sRate };\r\n            const ACtor: any = (window as any).AudioDecoder;\r\n            if (ACtor.isConfigSupported) {\r\n              ACtor.isConfigSupported(cfg)\r\n                .then((r: any) => { try { ad.configure(r?.config || cfg); } catch { ad.configure(cfg); } })\r\n                .catch(() => { try { ad.configure(cfg); } catch {} });\r\n            } else { try { ad.configure(cfg); } catch {} }\r\n            this.audioDecoder = ad; this.audioConfigured = true;\r\n            this.audioConfiguredChannels = numCh; this.audioConfiguredSampleRate = sRate;\r\n            this.audioLastCodec = codec; this.audioLastDescription = null;\r\n            try { if ((window as any).__DEMO_DEBUG) console.warn('[audio] lazy configured:', codec, numCh, sRate); } catch {}\r\n          } catch(e) { console.warn('audio lazy-config failed', e); }\r\n        }\r\n  if (msg.kind === 'audio' && this.audioDecoder && this.audioConfigured) {\r\n          try {\r\n            // 跳过空音频帧，避免解码错误并阻塞音频时钟建立\r\n            const dataLen = (msg.data && (msg.data as ArrayBuffer).byteLength) ? (msg.data as ArrayBuffer).byteLength : 0;\r\n            // 新增：空音频帧也可用于建立音频时基（只建立时钟，不解码音频数据）\r\n            if (dataLen <= 0) {\r\n              try {\r\n                if (typeof msg.ts === 'number') {\r\n                  this.audioCtx = this.audioCtx || new (window.AudioContext)();\r\n                  if (this.audioBasePtsUs === undefined) {\r\n                    this.audioBasePtsUs = 0;\r\n                    this.audioBaseTime = this.audioCtx.currentTime + 0.20;\r\n                    this.pcrBasePtsUs = undefined; this.pcrBaseTime = undefined;\r\n                    this.videoBasePtsUs = undefined; this.videoBaseTime = undefined;\r\n                    try { if ((window as any).__DEMO_DEBUG) console.debug('[clock] audio base set (from empty frame ts) at', this.audioBaseTime); } catch {}\r\n                  }\r\n                }\r\n              } catch {}\r\n              break;\r\n            }\r\n            // normalize & clamp ts\r\n            msg.ts = this.normalizeTsToUs(msg.ts);\r\n            const tsSafe = Math.max(0, Number(msg.ts) || 0);\r\n            const ainit: any = { type: 'key', timestamp: tsSafe, data: msg.data };\r\n            if (typeof msg.dur === 'number' && msg.dur > 0) ainit.duration = this.normalizeTsToUs(msg.dur);\r\n            const chunk = new (window as any).EncodedAudioChunk(ainit);\r\n            (this.audioDecoder as any).decode(chunk);\r\n            // 若发现真实输出采样率与配置不一致，则热重配\r\n          } catch (e) { console.warn('audio decode failed', e); }\r\n        }\r\n        break;\r\n      case 'stream-info':\r\n        // worker 显式声明流属性（例如无音频），则关闭音频时钟，启用视频/PCR 回退\r\n        try {\r\n          if (msg.hasAudio === false) {\r\n            try { if (this.audioDecoder) { this.audioDecoder.close(); } } catch {}\r\n            this.audioDecoder = undefined; this.audioConfigured = false;\r\n            this.audioBasePtsUs = undefined; this.audioBaseTime = undefined;\r\n          }\r\n        } catch {}\r\n        break;\r\n      case 'discontinuity':\r\n        // 分片/轨道发生 DISCONTINUITY：重置时基与队列，按新段首帧重建零点\r\n        try {\r\n          try { (this.videoDecoder?.flush?.() || Promise.resolve()).catch(()=>{}); } catch {}\r\n          try { (this.audioDecoder?.flush?.() || Promise.resolve()).catch(()=>{}); } catch {}\r\n          this.videoDecodeQueue = [];\r\n          this.audioQueue = [] as any[];\r\n          this.videoReadyForDeltas = false;\r\n          this.audioBasePtsUs = undefined; this.audioBaseTime = undefined;\r\n          this.videoBasePtsUs = undefined; this.videoBaseTime = undefined;\r\n          this.pcrBasePtsUs = undefined; this.pcrBaseTime = undefined;\r\n          this.mediaEpochUs = undefined;\r\n          this.firstVideoSeen = false; this.annexbDetected = false;\r\n          this.lastVideoPtsUs = undefined;\r\n          // 保持 UI 连续：累加时间轴偏移\r\n          if (this.continuousTimeline && typeof msg.nextStartUs === 'number') {\r\n            this.timelineOffsetUs = Math.max(this.timelineOffsetUs, Math.floor(msg.nextStartUs));\r\n          }\r\n          this._stopAllAudioSources();\r\n          if ((window as any).__DEMO_DEBUG) { try { console.warn('[clock] discontinuity: reset bases and queues'); } catch {} }\r\n        } catch {}\r\n        break;\r\n      case 'config-update':\r\n        // 运行时 extradata 变化（SPS/PPS/ASC），执行解码器重配置\r\n  if (msg.video && typeof (window as any).VideoDecoder !== 'undefined') {\r\n          try {\r\n            if (this.videoDecoder) { try { this.videoDecoder.close(); } catch(e) {} }\r\n            this.videoReadyForDeltas = false;\r\n            this.videoDecoder = new (window as any).VideoDecoder({\r\n              output: (frame: any) => {\r\n                const doDraw = () => {\r\n                  try {\r\n                    if (this.canvas && (this.canvas.width !== frame.codedWidth || this.canvas.height !== frame.codedHeight)) {\r\n                      this.canvas.width = frame.codedWidth; this.canvas.height = frame.codedHeight;\r\n                    }\r\n                    if (this.renderer2D && this.renderer2D.draw) { try { this.renderer2D.draw(frame); } catch {} }\r\n                    else { const ctx = this.canvas.getContext('2d'); if (ctx) { try { ctx.drawImage(frame, 0, 0, this.canvas.width, this.canvas.height); } catch {} } }\r\n                  } catch {}\r\n                  finally { try { frame.close(); } catch {} this.stats.framesDrawn++; try { this._markActivity(); } catch {} }\r\n                };\r\n                try {\r\n                  const ptsUs = typeof frame.timestamp === 'number' ? this.normalizeTsToUs(frame.timestamp) : undefined;\r\n                  // 若尚无音频/PCR 时钟，且未建立视频墙钟基准，则用首个输出帧建立基准\r\n                  if (ptsUs !== undefined && this.audioBasePtsUs === undefined && this.pcrBasePtsUs === undefined && (this.videoBasePtsUs === undefined || this.videoBaseTime === undefined)) {\r\n                    this.videoBasePtsUs = ptsUs;\r\n                    this.videoBaseTime = performance.now() / 1000;\r\n                    try { if ((window as any).__DEMO_DEBUG) console.warn('[clock] video wall-clock base set from output ts(us)=', ptsUs); } catch {}\r\n                  }\r\n                  if (ptsUs !== undefined && this.lastVideoPtsUs !== undefined && ptsUs < this.lastVideoPtsUs) {\r\n                    try { frame.close(); } catch {}\r\n                    this.videoReadyForDeltas = true;\r\n                    return;\r\n                  }\r\n                  const drawWithUpdate = () => { doDraw(); if (ptsUs !== undefined) this.lastVideoPtsUs = ptsUs; };\r\n                  if (ptsUs !== undefined && this.audioBasePtsUs !== undefined && this.audioBaseTime !== undefined && this.audioCtx) {\r\n                    const targetS = this.audioBaseTime + this.US_TO_S(ptsUs - this.audioBasePtsUs) / Math.max(0.01, this.playbackRate);\r\n                    const nowS = this.audioCtx.currentTime;\r\n            const delayMs = Math.max(0, (targetS - nowS) * 1000);\r\n                    if (delayMs > 1) setTimeout(drawWithUpdate, Math.min(delayMs, 50)); else drawWithUpdate();\r\n                  } else { drawWithUpdate(); }\r\n                } catch { doDraw(); }\r\n                this.videoReadyForDeltas = true;\r\n              },\r\n              error: (e: any) => {\r\n                console.error('VideoDecoder error', e);\r\n                try {\r\n                  this.videoReadyForDeltas = false;\r\n                  while (this.videoDecodeQueue.length && !this.videoDecodeQueue[0].key) { this.videoDecodeQueue.shift(); this.stats.framesDropped++; }\r\n                } catch {}\r\n              }\r\n            });\r\n            const cfg: any = { codec: msg.video.codec || 'avc1.42E01E', optimizeForLatency: true };\r\n            try { (cfg as any).hardwareAcceleration = 'prefer-hardware'; } catch {}\r\n            // 若标记为 AnnexB，忽略 description，避免与 AnnexB 裸流冲突\r\n            const isAnnexB = !!(msg.video as any).annexb;\r\n            if (!isAnnexB && msg.video.description) cfg.description = msg.video.description;\r\n            // 同步缓存新的参数集（若提供了 avcC/description）\r\n            try { if (msg.video.description) this._cacheSpsPpsFromAvcC(msg.video.description); } catch {}\r\n            try { if ((window as any).__DEMO_DEBUG) console.debug('[vcfg] reconfig video annexb=', isAnnexB, 'codec=', cfg.codec, 'desc?', !!cfg.description); } catch {}\r\n            try {\r\n              const Ctor: any = (window as any).VideoDecoder;\r\n              if (Ctor.isConfigSupported) {\r\n                Ctor.isConfigSupported(cfg).then((res: any) => {\r\n                  try { this.videoDecoder.configure(res?.config || cfg); } catch(e) { this.videoDecoder.configure(cfg); }\r\n                }).catch(() => { this.videoDecoder.configure(cfg); });\r\n              } else {\r\n                this.videoDecoder.configure(cfg);\r\n              }\r\n            } catch { this.videoDecoder.configure(cfg); }\r\n          } catch(e) {\r\n            console.warn('Video reconfigure failed', e);\r\n            if (this.enableSoftwareFallback) {\r\n              try { this.softwareVideoActive = true; console.warn('[fallback] switching to software video decode (stub)'); } catch {}\r\n            }\r\n          }\r\n        }\r\n    if (msg.audio && typeof (window as any).AudioDecoder !== 'undefined') {\r\n          try {\r\n      this.audioConfigured = false;\r\n      if (this.audioDecoder) { try { this.audioDecoder.close(); } catch(e) {} }\r\n            // 复用 ready-mp4 中的 output 逻辑（简化：仅重建配置）\r\n            const ad = new (window as any).AudioDecoder({ output: (frame: any) => {\r\n              try {\r\n                this.audioCtx = this.audioCtx || new (window.AudioContext)();\r\n                const numberOfChannels = (frame.numberOfChannels) || (frame.format && frame.format.channels) || 2;\r\n                const sampleRate = frame.sampleRate || 48000;\r\n                const frameCount = frame.numberOfFrames || frame.frameCount || 0;\r\n                // 如检测到真实采样率与当前配置不一致，则热重配\r\n                try {\r\n                  if (this.audioConfigured && this.audioConfiguredSampleRate && sampleRate && Math.abs(sampleRate - this.audioConfiguredSampleRate) >= 1) {\r\n                    const old = this.audioDecoder; this.audioDecoder = undefined; this.audioConfigured = false;\r\n                    try { old?.close?.(); } catch {}\r\n                    const ad2 = new (window as any).AudioDecoder({\r\n                      output: (f2: any) => {\r\n                        try {\r\n                          const nCh = (f2.numberOfChannels) || 2;\r\n                          const sR = f2.sampleRate || sampleRate;\r\n                          const fcnt = f2.numberOfFrames || 0;\r\n                          let framePtsUs2: number | undefined = undefined;\r\n                          if (typeof f2.timestamp === 'number') framePtsUs2 = this.normalizeTsToUs(f2.timestamp);\r\n                          this._ensureAudioGraph();\r\n                          const abuf = this.audioCtx!.createBuffer(nCh, fcnt, sR);\r\n                          for (let ch = 0; ch < nCh; ch++) { const cd = new Float32Array(fcnt); try { f2.copyTo(cd, { planeIndex: ch }); } catch { f2.copyTo(cd); } abuf.copyToChannel(cd, ch, 0); }\r\n                          const src2 = this.audioCtx!.createBufferSource(); src2.buffer = abuf; src2.connect(this.gainNode!);\r\n                          this._registerAudioSource(src2);\r\n                          if (framePtsUs2 !== undefined) {\r\n                            if (this.audioBaseTime === undefined) { this.audioBaseTime = this.audioCtx!.currentTime + 0.20; this.audioBasePtsUs = 0; }\r\n                            const baseUs2 = this.audioBasePtsUs ?? 0;\r\n                            const offsetS = this.US_TO_S(framePtsUs2 - baseUs2) / Math.max(0.01, this.playbackRate);\r\n                            const when = Math.max(this.audioCtx!.currentTime, this.audioBaseTime + offsetS);\r\n                            const now = this.audioCtx!.currentTime; if (when <= now + 0.02) src2.start(); else try { src2.start(when); } catch { src2.start(); }\r\n                          } else { src2.start(); }\r\n                        } catch {}\r\n                        finally { try { f2.close(); } catch {} }\r\n                      },\r\n                      error: (e: any) => console.error('AudioDecoder error (reconfig)', e)\r\n                    });\r\n                    const nChCfg = this.audioConfiguredChannels || numberOfChannels;\r\n                    const cfg2: any = { codec: this.audioLastCodec || 'mp4a.40.2', numberOfChannels: nChCfg, sampleRate: sampleRate };\r\n                    if (this.audioLastDescription) cfg2.description = this.audioLastDescription;\r\n                    try { const ACtor: any = (window as any).AudioDecoder; if (ACtor.isConfigSupported) { ACtor.isConfigSupported(cfg2).then((res: any) => { try { ad2.configure(res?.config || cfg2); } catch { ad2.configure(cfg2); } }).catch(() => { ad2.configure(cfg2); }); } else { ad2.configure(cfg2); } } catch { ad2.configure(cfg2); }\r\n                    this.audioDecoder = ad2; this.audioConfigured = true; this.audioConfiguredSampleRate = sampleRate; this.audioConfiguredChannels = nChCfg;\r\n                    try { if ((window as any).__DEMO_DEBUG) console.warn('[audio] hot reconfig to sampleRate=', sampleRate); } catch {}\r\n                  }\r\n                } catch {}\r\n                let framePtsUs: number | undefined = undefined;\r\n                if (typeof frame.timestamp === 'number') framePtsUs = this.normalizeTsToUs(frame.timestamp);\r\n                if (framePtsUs !== undefined && this.audioBasePtsUs === undefined) {\r\n                  this.audioBasePtsUs = 0; this.audioBaseTime = this.audioCtx.currentTime + 0.20;\r\n                  this.pcrBasePtsUs = undefined; this.pcrBaseTime = undefined;\r\n                  this.videoBasePtsUs = undefined; this.videoBaseTime = undefined;\r\n                  try { if ((window as any).__DEMO_DEBUG) console.debug('[clock] audio base set (zero) at', this.audioBaseTime); } catch {}\r\n                }\r\n                const audioBuffer = this.audioCtx.createBuffer(numberOfChannels, frameCount, sampleRate);\r\n                for (let ch = 0; ch < numberOfChannels; ch++) {\r\n                  const channelData = new Float32Array(frameCount);\r\n                  try { frame.copyTo(channelData, { planeIndex: ch }); } catch { frame.copyTo(channelData); }\r\n                  audioBuffer.copyToChannel(channelData, ch, 0);\r\n                }\r\n                this._ensureAudioGraph();\r\n                const src = this.audioCtx.createBufferSource(); src.buffer = audioBuffer; src.connect(this.gainNode!);\r\n                this._registerAudioSource(src);\r\n                if (this.audioBasePtsUs !== undefined && framePtsUs !== undefined && this.audioBaseTime !== undefined) {\r\n                  const offsetS = this.US_TO_S(framePtsUs - (this.audioBasePtsUs ?? 0)) / Math.max(0.01, this.playbackRate);\r\n                  const when = Math.max(this.audioCtx.currentTime, this.audioBaseTime + offsetS); const now = this.audioCtx.currentTime;\r\n                  const durS = (frameCount / sampleRate) / Math.max(0.01, this.playbackRate);\r\n                  if (when <= now + 0.02) { src.start(); this.audioScheduledUntilS = Math.max(this.audioScheduledUntilS, now + durS); }\r\n                  else { try { src.start(when); } catch { src.start(); } this.audioScheduledUntilS = Math.max(this.audioScheduledUntilS, when + durS); }\r\n                  try { (src as any).playbackRate.value = this.playbackRate; } catch {}\r\n                  try { this._markActivity(); } catch {}\r\n                } else {\r\n                  src.start();\r\n                  if (framePtsUs !== undefined && this.audioBasePtsUs === undefined) {\r\n                    this.audioBasePtsUs = 0; this.audioBaseTime = this.audioCtx.currentTime; this.pcrBasePtsUs = undefined; this.pcrBaseTime = undefined; this.videoBasePtsUs = undefined; this.videoBaseTime = undefined;\r\n                    try { if ((window as any).__DEMO_DEBUG) console.debug('[clock] audio base set (zero) at', this.audioBaseTime); } catch {}\r\n                  }\r\n                }\r\n              } catch (e) { console.warn('AudioDecoder output handling failed', e); } finally { try { frame.close(); } catch {} }\r\n            }, error: (e: any) => { console.error('AudioDecoder error', e); try { this.emit('error', e); } catch {} } });\r\n            const cfg: any = { codec: msg.audio.codec || 'mp4a.40.2' };\r\n            if (msg.audio.description) cfg.description = msg.audio.description;\r\n            // numberOfChannels and sampleRate are required for AudioDecoder configuration\r\n            cfg.numberOfChannels = msg.audio.numberOfChannels ?? 2;\r\n            cfg.sampleRate = msg.audio.sampleRate ?? 48000;\r\n            try {\r\n              const ACtor: any = (window as any).AudioDecoder;\r\n              if (ACtor.isConfigSupported) {\r\n                ACtor.isConfigSupported(cfg).then((res: any) => {\r\n                  try { ad.configure(res?.config || cfg); } catch(e) { ad.configure(cfg); }\r\n                }).catch(() => { ad.configure(cfg); });\r\n              } else {\r\n                ad.configure(cfg);\r\n              }\r\n            } catch { ad.configure(cfg); }\r\n            this.audioDecoder = ad;\r\n            this.audioConfigured = true;\r\n          } catch(e) { console.warn('Audio reconfigure failed', e); }\r\n        }\r\n        break;\r\n      case 'log':\r\n        try {\r\n          const msgStr = String(msg.msg ?? '');\r\n          // 控制台输出\r\n          // 使用 console.debug 降低噪音；可通过 window.__DEMO_DEBUG 控制\r\n          if ((window as any).__DEMO_DEBUG) console.info('[worker]', msgStr);\r\n          else console.debug('[worker]', msgStr);\r\n          // 页面日志面板（webcodes.html）\r\n          try {\r\n            const el = document.getElementById('consoleLog');\r\n            if (el) {\r\n              const line = document.createElement('div');\r\n              line.textContent = msgStr;\r\n              el.appendChild(line);\r\n              // 滚动到底\r\n              el.scrollTop = el.scrollHeight;\r\n            }\r\n          } catch {}\r\n        } catch {}\r\n        break;\r\n      default:\r\n        // ...existing code...\r\n    }\r\n  }\r\n}\r\n","import { PlayerCore } from '../../src/core/player-core';\r\n\r\n// expose to window for demo page\r\n(window as any).PlayerCore = PlayerCore;\r\ntry { if ((window as any).__DEMO_DEBUG) console.info('demo entry: PlayerCore exposed to window'); } catch {}\r\n\r\nexport default PlayerCore;\r\n"],"names":[],"mappings":"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"}